
AVRASM ver. 2.1.30  C:\cvavreval\BIN\Lab3_ADC\Debug\List\Lab3.asm Mon Aug 12 19:50:59 2024

C:\cvavreval\BIN\Lab3_ADC\Debug\List\Lab3.asm(1418): warning: Register r5 already defined by the .DEF directive
C:\cvavreval\BIN\Lab3_ADC\Debug\List\Lab3.asm(1419): warning: Register r4 already defined by the .DEF directive
C:\cvavreval\BIN\Lab3_ADC\Debug\List\Lab3.asm(1420): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.02 Evaluation
                 ;(C) Copyright 1998-2024 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0067 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 006c 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6425
C:\cvavreval\BIN\Lab3_ADC\Debug\List\Lab3.asm(1458): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x25,0x64,0x0
                 _0x2020003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 0002      	.DW  0x02
000037 0160      	.DW  __base_y_G101
000038 006a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003a 94f8      	CLI
                 
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004d e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004f 9185      	LPM  R24,Z+
000050 9195      	LPM  R25,Z+
000051 9700      	SBIW R24,0
000052 f061      	BREQ __GLOBAL_INI_END
000053 91a5      	LPM  R26,Z+
000054 91b5      	LPM  R27,Z+
000055 9005      	LPM  R0,Z+
000056 9015      	LPM  R1,Z+
000057 01bf      	MOVW R22,R30
000058 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000059 9005      	LPM  R0,Z+
00005a 920d      	ST   X+,R0
00005b 9701      	SBIW R24,1
00005c f7e1      	BRNE __GLOBAL_INI_LOOP
00005d 01fb      	MOVW R30,R22
00005e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 00b0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;interrupt [10] void timer0_ovf_isr(void)
                 ; 0000 0023 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000067 93ea      	ST   -Y,R30
                 ; 0000 0024 // Reinitialize Timer 0 value
                 ; 0000 0025 TCNT0=0x83;
000068 e8e3      	LDI  R30,LOW(131)
000069 bfe2      	OUT  0x32,R30
                 ; 0000 0026 // Place your code here
                 ; 0000 0027 
                 ; 0000 0028 }
00006a 91e9      	LD   R30,Y+
00006b 9518      	RETI
                 ; .FEND
                 ;interrupt [15] void adc_isr(void)
                 ; 0000 002F {
                 _adc_isr:
                 ; .FSTART _adc_isr
00006c 920a      	ST   -Y,R0
00006d 921a      	ST   -Y,R1
00006e 92fa      	ST   -Y,R15
00006f 936a      	ST   -Y,R22
000070 937a      	ST   -Y,R23
000071 938a      	ST   -Y,R24
000072 939a      	ST   -Y,R25
000073 93aa      	ST   -Y,R26
000074 93ba      	ST   -Y,R27
000075 93ea      	ST   -Y,R30
000076 93fa      	ST   -Y,R31
000077 b7ef      	IN   R30,SREG
000078 93ea      	ST   -Y,R30
                 ; 0000 0030 unsigned int adc_data, adc_v;
                 ; 0000 0031 char buffer[16];
                 ; 0000 0032 
                 ; 0000 0033 // Read the AD conversion result
                 ; 0000 0034 adc_data=ADCW;
000079 9760      	SBIW R28,16
00007a d2cc      	RCALL __SAVELOCR4
                 ;	adc_data -> R16,R17
                 ;	adc_v -> R18,R19
                 ;	buffer -> Y+4
                +
00007b b104     +IN R16 , 4
00007c b115     +IN R17 , 4 + 1
                 	__INWR 16,17,4
                 ; 0000 0035 // Place your code here
                 ; 0000 0036 adc_v = (unsigned long)adc_data*5000/1024;
00007d 01d8      	MOVW R26,R16
00007e 2788      	CLR  R24
00007f 2799      	CLR  R25
                +
000080 e8e8     +LDI R30 , LOW ( 0x1388 )
000081 e1f3     +LDI R31 , HIGH ( 0x1388 )
000082 e060     +LDI R22 , BYTE3 ( 0x1388 )
000083 e070     +LDI R23 , BYTE4 ( 0x1388 )
                 	__GETD1N 0x1388
000084 d2d2      	RCALL __MULD12U
000085 01df      	MOVW R26,R30
000086 01cb      	MOVW R24,R22
                +
000087 e0e0     +LDI R30 , LOW ( 0x400 )
000088 e0f4     +LDI R31 , HIGH ( 0x400 )
000089 e060     +LDI R22 , BYTE3 ( 0x400 )
00008a e070     +LDI R23 , BYTE4 ( 0x400 )
                 	__GETD1N 0x400
00008b d2eb      	RCALL __DIVD21U
00008c 019f      	MOVW R18,R30
                 ; 0000 0037 
                 ; 0000 0038 // Convert the actual voltage digital value to string
                 ; 0000 0039 sprintf(buffer, "%d", adc_v);
00008d 01fe      	MOVW R30,R28
00008e 9634      	ADIW R30,4
00008f 93fa      	ST   -Y,R31
000090 93ea      	ST   -Y,R30
                +
000091 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000092 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000093 93fa      	ST   -Y,R31
000094 93ea      	ST   -Y,R30
000095 01f9      	MOVW R30,R18
000096 2766      	CLR  R22
000097 2777      	CLR  R23
000098 d306      	RCALL __PUTPARD1
000099 e084      	LDI  R24,4
00009a d19b      	RCALL _sprintf
00009b 9628      	ADIW R28,8
                 ; 0000 003A 
                 ; 0000 003B lcd_clear();  // Clear the LCD screen
00009c d205      	RCALL _lcd_clear
                 ; 0000 003C lcd_puts(buffer);  // Print the voltage value on the LCD
00009d 01de      	MOVW R26,R28
00009e 9614      	ADIW R26,4
00009f d21f      	RCALL _lcd_puts
                 ; 0000 003D 
                 ; 0000 003E }
0000a0 d2ad      	RCALL __LOADLOCR4
0000a1 9664      	ADIW R28,20
0000a2 91e9      	LD   R30,Y+
0000a3 bfef      	OUT  SREG,R30
0000a4 91f9      	LD   R31,Y+
0000a5 91e9      	LD   R30,Y+
0000a6 91b9      	LD   R27,Y+
0000a7 91a9      	LD   R26,Y+
0000a8 9199      	LD   R25,Y+
0000a9 9189      	LD   R24,Y+
0000aa 9179      	LD   R23,Y+
0000ab 9169      	LD   R22,Y+
0000ac 90f9      	LD   R15,Y+
0000ad 9019      	LD   R1,Y+
0000ae 9009      	LD   R0,Y+
0000af 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0043 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0044 // Declare your local variables here
                 ; 0000 0045 
                 ; 0000 0046 // Input/Output Ports initialization
                 ; 0000 0047 // Port A initialization
                 ; 0000 0048 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0049 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 bbea      	OUT  0x1A,R30
                 ; 0000 004A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000b2 bbeb      	OUT  0x1B,R30
                 ; 0000 004C 
                 ; 0000 004D // Port B initialization
                 ; 0000 004E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000b3 bbe7      	OUT  0x17,R30
                 ; 0000 0050 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0051 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b4 bbe8      	OUT  0x18,R30
                 ; 0000 0052 
                 ; 0000 0053 // Port C initialization
                 ; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0055 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000b5 bbe4      	OUT  0x14,R30
                 ; 0000 0056 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0057 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b6 bbe5      	OUT  0x15,R30
                 ; 0000 0058 
                 ; 0000 0059 // Port D initialization
                 ; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000b7 bbe1      	OUT  0x11,R30
                 ; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000b8 bbe2      	OUT  0x12,R30
                 ; 0000 005E 
                 ; 0000 005F // Timer/Counter 0 initialization
                 ; 0000 0060 // Clock source: System Clock
                 ; 0000 0061 // Clock value: 62.500 kHz
                 ; 0000 0062 // Mode: Normal top=0xFF
                 ; 0000 0063 // OC0 output: Disconnected
                 ; 0000 0064 // Timer Period: 2 ms
                 ; 0000 0065 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
0000b9 e0e4      	LDI  R30,LOW(4)
0000ba bfe3      	OUT  0x33,R30
                 ; 0000 0066 TCNT0=0x83;
0000bb e8e3      	LDI  R30,LOW(131)
0000bc bfe2      	OUT  0x32,R30
                 ; 0000 0067 OCR0=0x00;
0000bd e0e0      	LDI  R30,LOW(0)
0000be bfec      	OUT  0x3C,R30
                 ; 0000 0068 
                 ; 0000 0069 // Timer/Counter 1 initialization
                 ; 0000 006A // Clock source: System Clock
                 ; 0000 006B // Clock value: Timer1 Stopped
                 ; 0000 006C // Mode: Normal top=0xFFFF
                 ; 0000 006D // OC1A output: Disconnected
                 ; 0000 006E // OC1B output: Disconnected
                 ; 0000 006F // Noise Canceler: Off
                 ; 0000 0070 // Input Capture on Falling Edge
                 ; 0000 0071 // Timer1 Overflow Interrupt: Off
                 ; 0000 0072 // Input Capture Interrupt: Off
                 ; 0000 0073 // Compare A Match Interrupt: Off
                 ; 0000 0074 // Compare B Match Interrupt: Off
                 ; 0000 0075 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000bf bdef      	OUT  0x2F,R30
                 ; 0000 0076 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000c0 bdee      	OUT  0x2E,R30
                 ; 0000 0077 TCNT1H=0x00;
0000c1 bded      	OUT  0x2D,R30
                 ; 0000 0078 TCNT1L=0x00;
0000c2 bdec      	OUT  0x2C,R30
                 ; 0000 0079 ICR1H=0x00;
0000c3 bde7      	OUT  0x27,R30
                 ; 0000 007A ICR1L=0x00;
0000c4 bde6      	OUT  0x26,R30
                 ; 0000 007B OCR1AH=0x00;
0000c5 bdeb      	OUT  0x2B,R30
                 ; 0000 007C OCR1AL=0x00;
0000c6 bdea      	OUT  0x2A,R30
                 ; 0000 007D OCR1BH=0x00;
0000c7 bde9      	OUT  0x29,R30
                 ; 0000 007E OCR1BL=0x00;
0000c8 bde8      	OUT  0x28,R30
                 ; 0000 007F 
                 ; 0000 0080 // Timer/Counter 2 initialization
                 ; 0000 0081 // Clock source: System Clock
                 ; 0000 0082 // Clock value: Timer2 Stopped
                 ; 0000 0083 // Mode: Normal top=0xFF
                 ; 0000 0084 // OC2 output: Disconnected
                 ; 0000 0085 ASSR=0<<AS2;
0000c9 bde2      	OUT  0x22,R30
                 ; 0000 0086 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000ca bde5      	OUT  0x25,R30
                 ; 0000 0087 TCNT2=0x00;
0000cb bde4      	OUT  0x24,R30
                 ; 0000 0088 OCR2=0x00;
0000cc bde3      	OUT  0x23,R30
                 ; 0000 0089 
                 ; 0000 008A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 008B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000cd e0e1      	LDI  R30,LOW(1)
0000ce bfe9      	OUT  0x39,R30
                 ; 0000 008C 
                 ; 0000 008D // External Interrupt(s) initialization
                 ; 0000 008E // INT0: Off
                 ; 0000 008F // INT1: Off
                 ; 0000 0090 // INT2: Off
                 ; 0000 0091 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 bfe5      	OUT  0x35,R30
                 ; 0000 0092 MCUCSR=(0<<ISC2);
0000d1 bfe4      	OUT  0x34,R30
                 ; 0000 0093 
                 ; 0000 0094 // USART initialization
                 ; 0000 0095 // USART disabled
                 ; 0000 0096 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d2 b9ea      	OUT  0xA,R30
                 ; 0000 0097 
                 ; 0000 0098 // Analog Comparator initialization
                 ; 0000 0099 // Analog Comparator: Off
                 ; 0000 009A // The Analog Comparator's positive input is
                 ; 0000 009B // connected to the AIN0 pin
                 ; 0000 009C // The Analog Comparator's negative input is
                 ; 0000 009D // connected to the AIN1 pin
                 ; 0000 009E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000d3 e8e0      	LDI  R30,LOW(128)
0000d4 b9e8      	OUT  0x8,R30
                 ; 0000 009F 
                 ; 0000 00A0 // ADC initialization
                 ; 0000 00A1 // ADC Clock frequency: 125.000 kHz
                 ; 0000 00A2 // ADC Auto Trigger Source: Timer0 Overflow
                 ; 0000 00A3 // Select the ADC input used in interrupt mode: ADC0
                 ; 0000 00A4 ADMUX=ADC_VREF_TYPE | 0;
0000d5 e4e0      	LDI  R30,LOW(64)
0000d6 b9e7      	OUT  0x7,R30
                 ; 0000 00A5 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000d7 eaef      	LDI  R30,LOW(175)
0000d8 b9e6      	OUT  0x6,R30
                 ; 0000 00A6 SFIOR=(1<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000d9 e8e0      	LDI  R30,LOW(128)
0000da bfe0      	OUT  0x30,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // SPI initialization
                 ; 0000 00A9 // SPI disabled
                 ; 0000 00AA SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000db e0e0      	LDI  R30,LOW(0)
0000dc b9ed      	OUT  0xD,R30
                 ; 0000 00AB 
                 ; 0000 00AC // TWI initialization
                 ; 0000 00AD // TWI disabled
                 ; 0000 00AE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000dd bfe6      	OUT  0x36,R30
                 ; 0000 00AF 
                 ; 0000 00B0 // Alphanumeric LCD initialization
                 ; 0000 00B1 // Connections are specified in the
                 ; 0000 00B2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00B3 // RS: PORTB Bit 0
                 ; 0000 00B4 // RD: PORTB Bit 1
                 ; 0000 00B5 // EN: PORTB Bit 2
                 ; 0000 00B6 // D4: PORTD Bit 4
                 ; 0000 00B7 // D5: PORTD Bit 5
                 ; 0000 00B8 // D6: PORTD Bit 6
                 ; 0000 00B9 // D7: PORTD Bit 7
                 ; 0000 00BA // Characters/line: 8
                 ; 0000 00BB lcd_init(8);
0000de e0a8      	LDI  R26,LOW(8)
0000df d1ee      	RCALL _lcd_init
                 ; 0000 00BC 
                 ; 0000 00BD // Globally enable interrupts
                 ; 0000 00BE #asm("sei")
0000e0 9478      	SEI
                 ; 0000 00BF 
                 ; 0000 00C0 while (1)
                 _0x3:
                 ; 0000 00C1 {
                 ; 0000 00C2 // Place your code here
                 ; 0000 00C3 
                 ; 0000 00C4 }
0000e1 cfff      	RJMP _0x3
                 ; 0000 00C5 }
                 _0x6:
0000e2 cfff      	RJMP _0x6
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000e3 d261      	RCALL __SAVELOCR6
0000e4 019d      	MOVW R18,R26
0000e5 815e      	LDD  R21,Y+6
0000e6 9612      	ADIW R26,2
                +
0000e7 91ed     +LD R30 , X +
0000e8 91fc     +LD R31 , X
0000e9 9711     +SBIW R26 , 1
                 	__GETW1P
0000ea 9730      	SBIW R30,0
0000eb f0e9      	BREQ _0x2000010
0000ec 01d9      	MOVW R26,R18
0000ed d224      	RCALL SUBOPT_0x0
0000ee 018f      	MOVW R16,R30
0000ef 9730      	SBIW R30,0
0000f0 f059      	BREQ _0x2000012
                +
0000f1 3002     +CPI R16 , LOW ( 2 )
0000f2 e0e0     +LDI R30 , HIGH ( 2 )
0000f3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000f4 f060      	BRLO _0x2000013
0000f5 01f8      	MOVW R30,R16
0000f6 9731      	SBIW R30,1
0000f7 018f      	MOVW R16,R30
                +
0000f8 01d9     +MOVW R26 , R18
0000f9 9614     +ADIW R26 , 4
0000fa 93ed     +ST X + , R30
0000fb 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000012:
0000fc 01d9      	MOVW R26,R18
0000fd 9612      	ADIW R26,2
0000fe d218      	RCALL SUBOPT_0x1
0000ff 9731      	SBIW R30,1
000100 8350      	ST   Z,R21
                 _0x2000013:
000101 01d9      	MOVW R26,R18
                +
000102 91ed     +LD R30 , X +
000103 91fc     +LD R31 , X
000104 9711     +SBIW R26 , 1
                 	__GETW1P
000105 23ff      	TST  R31
000106 f00a      	BRMI _0x2000014
000107 d20f      	RCALL SUBOPT_0x1
                 _0x2000014:
000108 c005      	RJMP _0x2000015
                 _0x2000010:
000109 01d9      	MOVW R26,R18
00010a efef      	LDI  R30,LOW(65535)
00010b efff      	LDI  R31,HIGH(65535)
00010c 93ed      	ST   X+,R30
00010d 93fc      	ST   X,R31
                 _0x2000015:
00010e d23d      	RCALL __LOADLOCR6
00010f 9627      	ADIW R28,7
000110 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000111 93ba      	ST   -Y,R27
000112 93aa      	ST   -Y,R26
000113 9726      	SBIW R28,6
000114 d230      	RCALL __SAVELOCR6
000115 e010      	LDI  R17,0
000116 85ac      	LDD  R26,Y+12
000117 85bd      	LDD  R27,Y+12+1
000118 e0e0      	LDI  R30,LOW(0)
000119 e0f0      	LDI  R31,HIGH(0)
00011a 93ed      	ST   X+,R30
00011b 93fc      	ST   X,R31
                 _0x2000016:
00011c 89ea      	LDD  R30,Y+18
00011d 89fb      	LDD  R31,Y+18+1
00011e 9631      	ADIW R30,1
00011f 8bea      	STD  Y+18,R30
000120 8bfb      	STD  Y+18+1,R31
000121 9731      	SBIW R30,1
000122 91e4      	LPM  R30,Z
000123 2f2e      	MOV  R18,R30
000124 30e0      	CPI  R30,0
000125 f409      	BRNE PC+2
000126 c108      	RJMP _0x2000018
000127 2fe1      	MOV  R30,R17
000128 30e0      	CPI  R30,0
000129 f431      	BRNE _0x200001C
00012a 3225      	CPI  R18,37
00012b f411      	BRNE _0x200001D
00012c e011      	LDI  R17,LOW(1)
00012d c001      	RJMP _0x200001E
                 _0x200001D:
00012e d1ee      	RCALL SUBOPT_0x2
                 _0x200001E:
00012f c0fe      	RJMP _0x200001B
                 _0x200001C:
000130 30e1      	CPI  R30,LOW(0x1)
000131 f4a1      	BRNE _0x200001F
000132 3225      	CPI  R18,37
000133 f411      	BRNE _0x2000020
000134 d1e8      	RCALL SUBOPT_0x2
000135 c0f7      	RJMP _0x20000CC
                 _0x2000020:
000136 e012      	LDI  R17,LOW(2)
000137 e040      	LDI  R20,LOW(0)
000138 e000      	LDI  R16,LOW(0)
000139 322d      	CPI  R18,45
00013a f411      	BRNE _0x2000021
00013b e001      	LDI  R16,LOW(1)
00013c c0f1      	RJMP _0x200001B
                 _0x2000021:
00013d 322b      	CPI  R18,43
00013e f411      	BRNE _0x2000022
00013f e24b      	LDI  R20,LOW(43)
000140 c0ed      	RJMP _0x200001B
                 _0x2000022:
000141 3220      	CPI  R18,32
000142 f411      	BRNE _0x2000023
000143 e240      	LDI  R20,LOW(32)
000144 c0e9      	RJMP _0x200001B
                 _0x2000023:
000145 c002      	RJMP _0x2000024
                 _0x200001F:
000146 30e2      	CPI  R30,LOW(0x2)
000147 f439      	BRNE _0x2000025
                 _0x2000024:
000148 e050      	LDI  R21,LOW(0)
000149 e013      	LDI  R17,LOW(3)
00014a 3320      	CPI  R18,48
00014b f411      	BRNE _0x2000026
00014c 6800      	ORI  R16,LOW(128)
00014d c0e0      	RJMP _0x200001B
                 _0x2000026:
00014e c003      	RJMP _0x2000027
                 _0x2000025:
00014f 30e3      	CPI  R30,LOW(0x3)
000150 f009      	BREQ PC+2
000151 c0dc      	RJMP _0x200001B
                 _0x2000027:
000152 3320      	CPI  R18,48
000153 f010      	BRLO _0x200002A
000154 332a      	CPI  R18,58
000155 f008      	BRLO _0x200002B
                 _0x200002A:
000156 c007      	RJMP _0x2000029
                 _0x200002B:
000157 e0aa      	LDI  R26,LOW(10)
000158 9f5a      	MUL  R21,R26
000159 2d50      	MOV  R21,R0
00015a 2fe2      	MOV  R30,R18
00015b 53e0      	SUBI R30,LOW(48)
00015c 0f5e      	ADD  R21,R30
00015d c0d0      	RJMP _0x200001B
                 _0x2000029:
00015e 2fe2      	MOV  R30,R18
00015f 36e3      	CPI  R30,LOW(0x63)
000160 f439      	BRNE _0x200002F
000161 d1c2      	RCALL SUBOPT_0x3
000162 89e8      	LDD  R30,Y+16
000163 89f9      	LDD  R31,Y+16+1
000164 81a4      	LDD  R26,Z+4
000165 93aa      	ST   -Y,R26
000166 d1c3      	RCALL SUBOPT_0x4
000167 c0c5      	RJMP _0x2000030
                 _0x200002F:
000168 37e3      	CPI  R30,LOW(0x73)
000169 f429      	BRNE _0x2000032
00016a d1b9      	RCALL SUBOPT_0x3
00016b d1c4      	RCALL SUBOPT_0x5
00016c d18c      	RCALL _strlen
00016d 2f1e      	MOV  R17,R30
00016e c007      	RJMP _0x2000033
                 _0x2000032:
00016f 37e0      	CPI  R30,LOW(0x70)
000170 f449      	BRNE _0x2000035
000171 d1b2      	RCALL SUBOPT_0x3
000172 d1bd      	RCALL SUBOPT_0x5
000173 d191      	RCALL _strlenf
000174 2f1e      	MOV  R17,R30
000175 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000176 6002      	ORI  R16,LOW(2)
000177 770f      	ANDI R16,LOW(127)
000178 e030      	LDI  R19,LOW(0)
000179 c037      	RJMP _0x2000036
                 _0x2000035:
00017a 36e4      	CPI  R30,LOW(0x64)
00017b f011      	BREQ _0x2000039
00017c 36e9      	CPI  R30,LOW(0x69)
00017d f411      	BRNE _0x200003A
                 _0x2000039:
00017e 6004      	ORI  R16,LOW(4)
00017f c002      	RJMP _0x200003B
                 _0x200003A:
000180 37e5      	CPI  R30,LOW(0x75)
000181 f431      	BRNE _0x200003C
                 _0x200003B:
000182 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000183 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000184 83ee      	STD  Y+6,R30
000185 83ff      	STD  Y+6+1,R31
000186 e015      	LDI  R17,LOW(5)
000187 c00c      	RJMP _0x200003D
                 _0x200003C:
000188 35e8      	CPI  R30,LOW(0x58)
000189 f411      	BRNE _0x200003F
00018a 6008      	ORI  R16,LOW(8)
00018b c003      	RJMP _0x2000040
                 _0x200003F:
00018c 37e8      	CPI  R30,LOW(0x78)
00018d f009      	BREQ PC+2
00018e c09e      	RJMP _0x2000071
                 _0x2000040:
00018f e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000190 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000191 83ee      	STD  Y+6,R30
000192 83ff      	STD  Y+6+1,R31
000193 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000194 ff02      	SBRS R16,2
000195 c015      	RJMP _0x2000042
000196 d18d      	RCALL SUBOPT_0x3
000197 89a8      	LDD  R26,Y+16
000198 89b9      	LDD  R27,Y+16+1
000199 9614      	ADIW R26,4
00019a 91ed      	LD   R30,X+
00019b 91fd      	LD   R31,X+
00019c 87ea      	STD  Y+10,R30
00019d 87fb      	STD  Y+10+1,R31
00019e 85ab      	LDD  R26,Y+11
00019f 23aa      	TST  R26
0001a0 f422      	BRPL _0x2000043
0001a1 d1b1      	RCALL __ANEGW1
0001a2 87ea      	STD  Y+10,R30
0001a3 87fb      	STD  Y+10+1,R31
0001a4 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001a5 3040      	CPI  R20,0
0001a6 f011      	BREQ _0x2000044
0001a7 5f1f      	SUBI R17,-LOW(1)
0001a8 c001      	RJMP _0x2000045
                 _0x2000044:
0001a9 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001aa c006      	RJMP _0x2000046
                 _0x2000042:
0001ab d178      	RCALL SUBOPT_0x3
0001ac 89a8      	LDD  R26,Y+16
0001ad 89b9      	LDD  R27,Y+16+1
0001ae d163      	RCALL SUBOPT_0x0
0001af 87ea      	STD  Y+10,R30
0001b0 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
0001b1 fd00      	SBRC R16,0
0001b2 c010      	RJMP _0x2000047
                 _0x2000048:
0001b3 1715      	CP   R17,R21
0001b4 f470      	BRSH _0x200004A
0001b5 ff07      	SBRS R16,7
0001b6 c008      	RJMP _0x200004B
0001b7 ff02      	SBRS R16,2
0001b8 c004      	RJMP _0x200004C
0001b9 7f0b      	ANDI R16,LOW(251)
0001ba 2f24      	MOV  R18,R20
0001bb 5011      	SUBI R17,LOW(1)
0001bc c001      	RJMP _0x200004D
                 _0x200004C:
0001bd e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001be c001      	RJMP _0x200004E
                 _0x200004B:
0001bf e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001c0 d15c      	RCALL SUBOPT_0x2
0001c1 5051      	SUBI R21,LOW(1)
0001c2 cff0      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001c3 2f31      	MOV  R19,R17
0001c4 ff01      	SBRS R16,1
0001c5 c016      	RJMP _0x200004F
                 _0x2000050:
0001c6 3030      	CPI  R19,0
0001c7 f099      	BREQ _0x2000052
0001c8 ff03      	SBRS R16,3
0001c9 c006      	RJMP _0x2000053
0001ca 81ee      	LDD  R30,Y+6
0001cb 81ff      	LDD  R31,Y+6+1
0001cc 9125      	LPM  R18,Z+
0001cd 83ee      	STD  Y+6,R30
0001ce 83ff      	STD  Y+6+1,R31
0001cf c005      	RJMP _0x2000054
                 _0x2000053:
0001d0 81ae      	LDD  R26,Y+6
0001d1 81bf      	LDD  R27,Y+6+1
0001d2 912d      	LD   R18,X+
0001d3 83ae      	STD  Y+6,R26
0001d4 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001d5 d147      	RCALL SUBOPT_0x2
0001d6 3050      	CPI  R21,0
0001d7 f009      	BREQ _0x2000055
0001d8 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001d9 5031      	SUBI R19,LOW(1)
0001da cfeb      	RJMP _0x2000050
                 _0x2000052:
0001db c048      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001dc e320      	LDI  R18,LOW(48)
0001dd 81ee      	LDD  R30,Y+6
0001de 81ff      	LDD  R31,Y+6+1
0001df d1bb      	RCALL __GETW1PF
0001e0 87e8      	STD  Y+8,R30
0001e1 87f9      	STD  Y+8+1,R31
0001e2 81ee      	LDD  R30,Y+6
0001e3 81ff      	LDD  R31,Y+6+1
0001e4 9632      	ADIW R30,2
0001e5 83ee      	STD  Y+6,R30
0001e6 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001e7 85e8      	LDD  R30,Y+8
0001e8 85f9      	LDD  R31,Y+8+1
0001e9 85aa      	LDD  R26,Y+10
0001ea 85bb      	LDD  R27,Y+10+1
0001eb 17ae      	CP   R26,R30
0001ec 07bf      	CPC  R27,R31
0001ed f050      	BRLO _0x200005C
0001ee 5f2f      	SUBI R18,-LOW(1)
0001ef 85a8      	LDD  R26,Y+8
0001f0 85b9      	LDD  R27,Y+8+1
0001f1 85ea      	LDD  R30,Y+10
0001f2 85fb      	LDD  R31,Y+10+1
0001f3 1bea      	SUB  R30,R26
0001f4 0bfb      	SBC  R31,R27
0001f5 87ea      	STD  Y+10,R30
0001f6 87fb      	STD  Y+10+1,R31
0001f7 cfef      	RJMP _0x200005A
                 _0x200005C:
0001f8 332a      	CPI  R18,58
0001f9 f028      	BRLO _0x200005D
0001fa ff03      	SBRS R16,3
0001fb c002      	RJMP _0x200005E
0001fc 5f29      	SUBI R18,-LOW(7)
0001fd c001      	RJMP _0x200005F
                 _0x200005E:
0001fe 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0001ff fd04      	SBRC R16,4
000200 c019      	RJMP _0x2000061
000201 3321      	CPI  R18,49
000202 f420      	BRSH _0x2000063
000203 85a8      	LDD  R26,Y+8
000204 85b9      	LDD  R27,Y+8+1
000205 9711      	SBIW R26,1
000206 f409      	BRNE _0x2000062
                 _0x2000063:
000207 c009      	RJMP _0x20000CD
                 _0x2000062:
000208 1753      	CP   R21,R19
000209 f010      	BRLO _0x2000067
00020a ff00      	SBRS R16,0
00020b c001      	RJMP _0x2000068
                 _0x2000067:
00020c c011      	RJMP _0x2000066
                 _0x2000068:
00020d e220      	LDI  R18,LOW(32)
00020e ff07      	SBRS R16,7
00020f c00a      	RJMP _0x2000069
000210 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000211 6100      	ORI  R16,LOW(16)
000212 ff02      	SBRS R16,2
000213 c006      	RJMP _0x200006A
000214 7f0b      	ANDI R16,LOW(251)
000215 934a      	ST   -Y,R20
000216 d113      	RCALL SUBOPT_0x4
000217 3050      	CPI  R21,0
000218 f009      	BREQ _0x200006B
000219 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00021a d102      	RCALL SUBOPT_0x2
00021b 3050      	CPI  R21,0
00021c f009      	BREQ _0x200006C
00021d 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00021e 5031      	SUBI R19,LOW(1)
00021f 85a8      	LDD  R26,Y+8
000220 85b9      	LDD  R27,Y+8+1
000221 9712      	SBIW R26,2
000222 f008      	BRLO _0x2000059
000223 cfb8      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000224 ff00      	SBRS R16,0
000225 c007      	RJMP _0x200006D
                 _0x200006E:
000226 3050      	CPI  R21,0
000227 f029      	BREQ _0x2000070
000228 5051      	SUBI R21,LOW(1)
000229 e2e0      	LDI  R30,LOW(32)
00022a 93ea      	ST   -Y,R30
00022b d0fe      	RCALL SUBOPT_0x4
00022c cff9      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00022d e010      	LDI  R17,LOW(0)
                 _0x200001B:
00022e ceed      	RJMP _0x2000016
                 _0x2000018:
00022f 85ac      	LDD  R26,Y+12
000230 85bd      	LDD  R27,Y+12+1
000231 91ed      	LD   R30,X+
000232 91fd      	LD   R31,X+
000233 d118      	RCALL __LOADLOCR6
000234 9664      	ADIW R28,20
000235 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000236 92ff      	PUSH R15
000237 2ef8      	MOV  R15,R24
000238 9726      	SBIW R28,6
000239 d10b      	RCALL __SAVELOCR6
00023a 01fe      	MOVW R30,R28
                +
00023b 2400     +CLR R0
00023c 0def     +ADD R30 , R15
00023d 1df0     +ADC R31 , R0
                 	__ADDW1R15
                +
00023e 8546     +LDD R20 , Z + 14
00023f 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
000240 2e04      	MOV  R0,R20
000241 2a05      	OR   R0,R21
000242 f419      	BRNE _0x2000072
000243 efef      	LDI  R30,LOW(65535)
000244 efff      	LDI  R31,HIGH(65535)
000245 c023      	RJMP _0x2080002
                 _0x2000072:
000246 01de      	MOVW R26,R28
000247 9618      	ADIW R26,8
                +
000248 2400     +CLR R0
000249 0daf     +ADD R26 , R15
00024a 1db0     +ADC R27 , R0
                 	__ADDW2R15
00024b 018d      	MOVW R16,R26
                +
00024c 8748     +STD Y + 8 , R20
00024d 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
00024e e0e0      	LDI  R30,LOW(0)
00024f 87ea      	STD  Y+10,R30
000250 87eb      	STD  Y+10+1,R30
000251 01de      	MOVW R26,R28
000252 961c      	ADIW R26,12
                +
000253 2400     +CLR R0
000254 0daf     +ADD R26 , R15
000255 1db0     +ADC R27 , R0
                 	__ADDW2R15
000256 91ed      	LD   R30,X+
000257 91fd      	LD   R31,X+
000258 93fa      	ST   -Y,R31
000259 93ea      	ST   -Y,R30
00025a 931a      	ST   -Y,R17
00025b 930a      	ST   -Y,R16
00025c eee3      	LDI  R30,LOW(_put_buff_G100)
00025d e0f0      	LDI  R31,HIGH(_put_buff_G100)
00025e 93fa      	ST   -Y,R31
00025f 93ea      	ST   -Y,R30
000260 01de      	MOVW R26,R28
000261 961c      	ADIW R26,12
000262 deae      	RCALL __print_G100
000263 019f      	MOVW R18,R30
000264 85a8      	LDD  R26,Y+8
000265 85b9      	LDD  R27,Y+8+1
000266 e0e0      	LDI  R30,LOW(0)
000267 93ec      	ST   X,R30
000268 01f9      	MOVW R30,R18
                 _0x2080002:
000269 d0e2      	RCALL __LOADLOCR6
00026a 962c      	ADIW R28,12
00026b 90ff      	POP  R15
00026c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00026d 931a      	ST   -Y,R17
00026e 2f1a      	MOV  R17,R26
00026f b3e2      	IN   R30,0x12
000270 70ef      	ANDI R30,LOW(0xF)
000271 2fae      	MOV  R26,R30
000272 2fe1      	MOV  R30,R17
000273 7fe0      	ANDI R30,LOW(0xF0)
000274 2bea      	OR   R30,R26
000275 bbe2      	OUT  0x12,R30
                +
000276 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000277 958a     +DEC R24
000278 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000279 9ac2      	SBI  0x18,2
                +
00027a e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00027b 958a     +DEC R24
00027c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00027d 98c2      	CBI  0x18,2
                +
00027e e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00027f 958a     +DEC R24
000280 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000281 c075      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000282 93aa      	ST   -Y,R26
000283 81a8      	LD   R26,Y
000284 dfe8      	RCALL __lcd_write_nibble_G101
000285 81e8          ld    r30,y
000286 95e2          swap  r30
000287 83e8          st    y,r30
000288 81a8      	LD   R26,Y
000289 dfe3      	RCALL __lcd_write_nibble_G101
                +
00028a ec88     +LDI R24 , LOW ( 200 )
00028b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00028c 9701     +SBIW R24 , 1
00028d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00028e 9621      	ADIW R28,1
00028f 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000290 931a      	ST   -Y,R17
000291 930a      	ST   -Y,R16
000292 2f1a      	MOV  R17,R26
000293 810a      	LDD  R16,Y+2
000294 2fe1      	MOV  R30,R17
000295 e0f0      	LDI  R31,0
000296 5ae0      	SUBI R30,LOW(-__base_y_G101)
000297 4ffe      	SBCI R31,HIGH(-__base_y_G101)
000298 81e0      	LD   R30,Z
000299 0fe0      	ADD  R30,R16
00029a 2fae      	MOV  R26,R30
00029b dfe6      	RCALL __lcd_write_data
00029c 2e50      	MOV  R5,R16
00029d 2e41      	MOV  R4,R17
00029e 8119      	LDD  R17,Y+1
00029f 8108      	LDD  R16,Y+0
0002a0 9623      	ADIW R28,3
0002a1 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002a2 e0a2      	LDI  R26,LOW(2)
0002a3 d096      	RCALL SUBOPT_0x6
0002a4 e0ac      	LDI  R26,LOW(12)
0002a5 dfdc      	RCALL __lcd_write_data
0002a6 e0a1      	LDI  R26,LOW(1)
0002a7 d092      	RCALL SUBOPT_0x6
0002a8 e0e0      	LDI  R30,LOW(0)
0002a9 2e4e      	MOV  R4,R30
0002aa 2e5e      	MOV  R5,R30
0002ab 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002ac 931a      	ST   -Y,R17
0002ad 2f1a      	MOV  R17,R26
0002ae 301a      	CPI  R17,10
0002af f011      	BREQ _0x2020005
0002b0 1457      	CP   R5,R7
0002b1 f038      	BRLO _0x2020004
                 _0x2020005:
0002b2 e0e0      	LDI  R30,LOW(0)
0002b3 93ea      	ST   -Y,R30
0002b4 9443      	INC  R4
0002b5 2da4      	MOV  R26,R4
0002b6 dfd9      	RCALL _lcd_gotoxy
0002b7 301a      	CPI  R17,10
0002b8 f1f1      	BREQ _0x2080001
                 _0x2020004:
0002b9 9453      	INC  R5
0002ba 9ac0      	SBI  0x18,0
0002bb 2fa1      	MOV  R26,R17
0002bc dfc5      	RCALL __lcd_write_data
0002bd 98c0      	CBI  0x18,0
0002be c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002bf d087      	RCALL __SAVELOCR4
0002c0 019d      	MOVW R18,R26
                 _0x2020008:
0002c1 01d9      	MOVW R26,R18
                +
0002c2 5f2f     +SUBI R18 , LOW ( - 1 )
0002c3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002c4 91ec      	LD   R30,X
0002c5 2f1e      	MOV  R17,R30
0002c6 30e0      	CPI  R30,0
0002c7 f019      	BREQ _0x202000A
0002c8 2fa1      	MOV  R26,R17
0002c9 dfe2      	RCALL _lcd_putchar
0002ca cff6      	RJMP _0x2020008
                 _0x202000A:
0002cb d082      	RCALL __LOADLOCR4
0002cc 9624      	ADIW R28,4
0002cd 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002ce 931a      	ST   -Y,R17
0002cf 2f1a      	MOV  R17,R26
0002d0 b3e1      	IN   R30,0x11
0002d1 6fe0      	ORI  R30,LOW(0xF0)
0002d2 bbe1      	OUT  0x11,R30
0002d3 9aba      	SBI  0x17,2
0002d4 9ab8      	SBI  0x17,0
0002d5 9ab9      	SBI  0x17,1
0002d6 98c2      	CBI  0x18,2
0002d7 98c0      	CBI  0x18,0
0002d8 98c1      	CBI  0x18,1
0002d9 2e71      	MOV  R7,R17
0002da 2fe1      	MOV  R30,R17
0002db 58e0      	SUBI R30,-LOW(128)
                +
0002dc 93e0 0162+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002de 2fe1      	MOV  R30,R17
0002df 54e0      	SUBI R30,-LOW(192)
                +
0002e0 93e0 0163+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002e2 e1a4      	LDI  R26,LOW(20)
0002e3 e0b0      	LDI  R27,0
0002e4 d0bf      	RCALL _delay_ms
0002e5 d058      	RCALL SUBOPT_0x7
0002e6 d057      	RCALL SUBOPT_0x7
0002e7 d056      	RCALL SUBOPT_0x7
0002e8 e2a0      	LDI  R26,LOW(32)
0002e9 df83      	RCALL __lcd_write_nibble_G101
                +
0002ea e980     +LDI R24 , LOW ( 400 )
0002eb e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0002ec 9701     +SBIW R24 , 1
0002ed f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0002ee e2a8      	LDI  R26,LOW(40)
0002ef df92      	RCALL __lcd_write_data
0002f0 e0a4      	LDI  R26,LOW(4)
0002f1 df90      	RCALL __lcd_write_data
0002f2 e8a5      	LDI  R26,LOW(133)
0002f3 df8e      	RCALL __lcd_write_data
0002f4 e0a6      	LDI  R26,LOW(6)
0002f5 df8c      	RCALL __lcd_write_data
0002f6 dfab      	RCALL _lcd_clear
                 _0x2080001:
0002f7 9119      	LD   R17,Y+
0002f8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002f9 93ba      	ST   -Y,R27
0002fa 93aa      	ST   -Y,R26
0002fb 91a9          ld   r26,y+
0002fc 91b9          ld   r27,y+
0002fd 27ee          clr  r30
0002fe 27ff          clr  r31
                 strlen0:
0002ff 916d          ld   r22,x+
000300 2366          tst  r22
000301 f011          breq strlen1
000302 9631          adiw r30,1
000303 cffb          rjmp strlen0
                 strlen1:
000304 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000305 93ba      	ST   -Y,R27
000306 93aa      	ST   -Y,R26
000307 27aa          clr  r26
000308 27bb          clr  r27
000309 91e9          ld   r30,y+
00030a 91f9          ld   r31,y+
                 strlenf0:
00030b 9005      	lpm  r0,z+
00030c 2000          tst  r0
00030d f011          breq strlenf1
00030e 9611          adiw r26,1
00030f cffb          rjmp strlenf0
                 strlenf1:
000310 01fd          movw r30,r26
000311 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000312 9614      	ADIW R26,4
                +
000313 91ed     +LD R30 , X +
000314 91fc     +LD R31 , X
000315 9711     +SBIW R26 , 1
                 	__GETW1P
000316 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000317 91ed      	LD   R30,X+
000318 91fd      	LD   R31,X+
000319 9631      	ADIW R30,1
00031a 93fe      	ST   -X,R31
00031b 93ee      	ST   -X,R30
00031c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x2:
00031d 932a      	ST   -Y,R18
00031e 85ad      	LDD  R26,Y+13
00031f 85be      	LDD  R27,Y+13+1
000320 85ef      	LDD  R30,Y+15
000321 89f8      	LDD  R31,Y+15+1
000322 9509      	ICALL
000323 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x3:
000324 89e8      	LDD  R30,Y+16
000325 89f9      	LDD  R31,Y+16+1
000326 9734      	SBIW R30,4
000327 8be8      	STD  Y+16,R30
000328 8bf9      	STD  Y+16+1,R31
000329 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
00032a 85ad      	LDD  R26,Y+13
00032b 85be      	LDD  R27,Y+13+1
00032c 85ef      	LDD  R30,Y+15
00032d 89f8      	LDD  R31,Y+15+1
00032e 9509      	ICALL
00032f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
000330 89a8      	LDD  R26,Y+16
000331 89b9      	LDD  R27,Y+16+1
000332 9614      	ADIW R26,4
000333 91ed      	LD   R30,X+
000334 91fd      	LD   R31,X+
000335 83ee      	STD  Y+6,R30
000336 83ff      	STD  Y+6+1,R31
000337 81ae      	LDD  R26,Y+6
000338 81bf      	LDD  R27,Y+6+1
000339 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00033a df47      	RCALL __lcd_write_data
00033b e0a3      	LDI  R26,LOW(3)
00033c e0b0      	LDI  R27,0
00033d c066      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
00033e e3a0      	LDI  R26,LOW(48)
00033f df2d      	RCALL __lcd_write_nibble_G101
                +
000340 e980     +LDI R24 , LOW ( 400 )
000341 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000342 9701     +SBIW R24 , 1
000343 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000344 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000345 935a      	ST   -Y,R21
                 __SAVELOCR5:
000346 934a      	ST   -Y,R20
                 __SAVELOCR4:
000347 933a      	ST   -Y,R19
                 __SAVELOCR3:
000348 932a      	ST   -Y,R18
                 __SAVELOCR2:
000349 931a      	ST   -Y,R17
00034a 930a      	ST   -Y,R16
00034b 9508      	RET
                 
                 __LOADLOCR6:
00034c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00034d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00034e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00034f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000350 8119      	LDD  R17,Y+1
000351 8108      	LD   R16,Y
000352 9508      	RET
                 
                 __ANEGW1:
000353 95f1      	NEG  R31
000354 95e1      	NEG  R30
000355 40f0      	SBCI R31,0
000356 9508      	RET
                 
                 __MULD12:
                 __MULD12U:
000357 9f7a      	MUL  R23,R26
000358 2d70      	MOV  R23,R0
000359 9f6b      	MUL  R22,R27
00035a 0d70      	ADD  R23,R0
00035b 9ff8      	MUL  R31,R24
00035c 0d70      	ADD  R23,R0
00035d 9fe9      	MUL  R30,R25
00035e 0d70      	ADD  R23,R0
00035f 9f6a      	MUL  R22,R26
000360 2d60      	MOV  R22,R0
000361 0d71      	ADD  R23,R1
000362 9ffb      	MUL  R31,R27
000363 0d60      	ADD  R22,R0
000364 1d71      	ADC  R23,R1
000365 9fe8      	MUL  R30,R24
000366 0d60      	ADD  R22,R0
000367 1d71      	ADC  R23,R1
000368 2788      	CLR  R24
000369 9ffa      	MUL  R31,R26
00036a 2df0      	MOV  R31,R0
00036b 0d61      	ADD  R22,R1
00036c 1f78      	ADC  R23,R24
00036d 9feb      	MUL  R30,R27
00036e 0df0      	ADD  R31,R0
00036f 1d61      	ADC  R22,R1
000370 1f78      	ADC  R23,R24
000371 9fea      	MUL  R30,R26
000372 2de0      	MOV  R30,R0
000373 0df1      	ADD  R31,R1
000374 1f68      	ADC  R22,R24
000375 1f78      	ADC  R23,R24
000376 9508      	RET
                 
                 __DIVD21U:
000377 933f      	PUSH R19
000378 934f      	PUSH R20
000379 935f      	PUSH R21
00037a 2400      	CLR  R0
00037b 2411      	CLR  R1
00037c 01a0      	MOVW R20,R0
00037d e230      	LDI  R19,32
                 __DIVD21U1:
00037e 0faa      	LSL  R26
00037f 1fbb      	ROL  R27
000380 1f88      	ROL  R24
000381 1f99      	ROL  R25
000382 1c00      	ROL  R0
000383 1c11      	ROL  R1
000384 1f44      	ROL  R20
000385 1f55      	ROL  R21
000386 1a0e      	SUB  R0,R30
000387 0a1f      	SBC  R1,R31
000388 0b46      	SBC  R20,R22
000389 0b57      	SBC  R21,R23
00038a f428      	BRCC __DIVD21U2
00038b 0e0e      	ADD  R0,R30
00038c 1e1f      	ADC  R1,R31
00038d 1f46      	ADC  R20,R22
00038e 1f57      	ADC  R21,R23
00038f c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000390 60a1      	SBR  R26,1
                 __DIVD21U3:
000391 953a      	DEC  R19
000392 f759      	BRNE __DIVD21U1
000393 01fd      	MOVW R30,R26
000394 01bc      	MOVW R22,R24
000395 01d0      	MOVW R26,R0
000396 01ca      	MOVW R24,R20
000397 915f      	POP  R21
000398 914f      	POP  R20
000399 913f      	POP  R19
00039a 9508      	RET
                 
                 __GETW1PF:
00039b 9005      	LPM  R0,Z+
00039c 91f4      	LPM  R31,Z
00039d 2de0      	MOV  R30,R0
00039e 9508      	RET
                 
                 __PUTPARD1:
00039f 937a      	ST   -Y,R23
0003a0 936a      	ST   -Y,R22
0003a1 93fa      	ST   -Y,R31
0003a2 93ea      	ST   -Y,R30
0003a3 9508      	RET
                 
                 _delay_ms:
0003a4 9610      	adiw r26,0
0003a5 f039      	breq __delay_ms1
                 __delay_ms0:
0003a6 95a8      	wdr
                +
0003a7 ea80     +LDI R24 , LOW ( 0xFA0 )
0003a8 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0003a9 9701     +SBIW R24 , 1
0003aa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0003ab 9711      	sbiw r26,1
0003ac f7c9      	brne __delay_ms0
                 __delay_ms1:
0003ad 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  35 r1 :  13 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   8 
r16:  39 r17:  40 r18:  40 r19:  13 r20:  19 r21:  27 r22:  22 r23:  19 
r24:  37 r25:  11 r26: 102 r27:  34 r28:  18 r29:   1 r30: 218 r31:  72 
x  :  31 y  : 161 z  :  17 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  13 add   :  15 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  22 ld    :  42 ldd   :  61 ldi   : 101 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  35 movw  :  34 
mul   :  11 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   7 out   :  45 pop   :   4 push  :   4 rcall :  62 ret   :  25 
reti  :   2 rjmp  :  59 rol   :   7 ror   :   0 sbc   :   4 sbci  :   3 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  22 sbr   :   1 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  64 std   :  30 sts   :   2 sub   :   2 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00075c   1852     32   1884   16384  11.5%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
