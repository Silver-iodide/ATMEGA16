/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.0 Professional
Automatic Program Generator
© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 8/20/2024
Author  : NeVaDa
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 16.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*****************************************************/

#include <mega16.h>
#include <delay.h>
//#include <fdacoefs.h>
//#include <tmwtypes.h>
// Alphanumeric LCD Module functions
#include <alcd.h>
#include <stdio.h>

// Declare your global variables here
#define ADC_VREF_TYPE 0x40
char counter = 10;
char SAMPLE_POINT = 127; // Number of data needed to be sent to serial port
char new_unfiltered_data;
// Buffer to store the last 61 samples, used for FIR conversion since there are only 61 coefficient exists
unsigned int adc_data[61];  
           
unsigned int unfiltered_data[SAMPLE_POINT];  // Buffer to store 127 unfiltered samples
long filtered_data[SAMPLE_POINT];            // Buffer to store 127 filtered samples

char filter_index = 0;
char sample_index = 0;

// Storing FIR filter coefficients in Flash memory
flash int B[61] = {
        0,      1,      2,      3,      3,      0,     -9,    -25,    -50,
      -85,   -129,   -179,   -229,   -271,   -292,   -279,   -217,    -91,
      111,    399,    775,   1235,   1767,   2350,   2957,   3556,   4111,
     4587,   4953,   5183,   5261,   5183,   4953,   4587,   4111,   3556,
     2957,   2350,   1767,   1235,    775,    399,    111,    -91,   -217,
     -279,   -292,   -271,   -229,   -179,   -129,    -85,    -50,    -25,
       -9,      0,      3,      3,      2,      1,      0};



/*****************************************
External Interrupt 0 service routine:
This is for changing the mode of FIR among
Lowpass, highpass, bandpass, bandstop filter
*******************************************/
interrupt [EXT_INT0] void ext_int0_isr(void)
{
// ToDo:

}


/*********************************************** 
Timer 0 overflow interrupt service routine
Used for generating 10Hz square wave to PA2.
************************************/
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
// Reinitialize Timer 0 value
TCNT0=0xB2;
// ToDo:
// Status: Done
counter--;

if (counter == 0)
    {
    counter = 10;
    PORTA.2 = ~PORTA.2;
    }
}

// Timer1 output compare A interrupt service routine
// NOT USED since ADC is auto triggered by the Timer1 Compare Match
//interrupt [TIM1_COMPA] void timer1_compa_isr(void)
//{
//
//}


void trans_data(int xl)
{
unsigned char H5,L5;
unsigned int AD_x;
AD_x = xl & 0x3FFF;
H5 = AD_x>>5;
L5 = AD_x & 0x1F;
putchar(L5+11);
putchar(H5+51);
}


/*****************************
ADC interrupt service routine:
Do the AD conversion and perform the FIR filter operation.
************************************************/
interrupt [ADC_INT] void adc_isr(void)
{
// ToDo: 
// Do the FIR filter operation and store both unfiltered and filtered data;
// After the filtered data reaches 127#, send both the original
// and filtered data to serial port 

unsigned int adc_value;        // Variable storing AD conversion result

// Read the AD conversion result
adc_value = ADCW;
adc_data[filter_index] = adc_value;
unfiltered_data[sample_index] = adc_value;  // Store unfiltered sample

sample_index++;
// Which condition to apply FIR? Answer: after adc_isr triggered, which represents new values has been plug in.
new_unfiltered_data = 1;
// printf("%d", sample_index);
// main function checking frequency is much higher than the adc_isr

}


void main(void)
{
// Declare your local variables here
char i,j,k;
// Input/Output Ports initialization
// Port A initialization
PORTA=0x00;
DDRA=0x02;      // set PA2 as output

// Port B initialization
PORTB=0x00;
DDRB=0x00;

// Port C initialization
PORTC=0x00;
DDRC=0x00;

// Port D initialization
PORTD=0x00;
DDRD=0x00;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 15.625 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=0x05;
TCNT0=0xB2;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 62.500 kHz
// Mode: CTC top=OCR1A
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: On
// Compare B Match Interrupt: Off
//TCCR1A=0x00;
//TCCR1B=0x0C;
//TCNT1H=0x00;
//TCNT1L=0x00;
//ICR1H=0x00;
//ICR1L=0x00;
//OCR1AH=0x00;
//OCR1AL=0xF9;
//OCR1BH=0x00;
//OCR1BL=0xF9;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 62.500 kHz (F_CPU / 256)
// Mode: CTC top=ICR1
// OC1A output: Disconnected
// OC1B output: Disconnected
TCCR1A = 0x00; // CTC mode
TCCR1B = 0x0C; // CTC mode with ICR1 as top, prescaler = 256
TCNT1H = 0x00;
TCNT1L = 0x00;
ICR1H = 0x00;  // Set ICR1 to the desired top value
ICR1L = 0xF9; // Set ICR1 to 249 for 250Hz

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// INT1: Off
// INT2: Off
GICR|=0x40;
MCUCR=0x02;
MCUCSR=0x00;
GIFR=0x40;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x11;

// USART initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART Mode: Asynchronous
// USART Baud Rate: 9600
UCSRA=0x00;
UCSRB=0x18;
UCSRC=0x86;
UBRRH=0x00;
UBRRL=0x67;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC Clock frequency: 250.000 kHz
// ADC Voltage Reference: AVCC pin
// ADC Auto Trigger Source: Timer1 Compare Match B
ADMUX=(ADC_VREF_TYPE & 0xff) | (1 << MUX2) | (1 << MUX0);    //ADMUX |= (1 << 0) will set ADMUX's first bit to 1.
ADCSRA=0xAE;
SFIOR&=0x1F;
SFIOR|=0x20;   // Change, I dont know what will happen!!!!!!!!!!!!!!!!!1

// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWCR=0x00;

// Alphanumeric LCD initialization
// Connections specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTB Bit 0
// RD - PORTB Bit 1
// EN - PORTB Bit 2
// D4 - PORTD Bit 4
// D5 - PORTD Bit 5
// D6 - PORTD Bit 6
// D7 - PORTD Bit 7
// Characters/line: 8
lcd_init(8);

// Global enable interrupts
#asm("sei")

while (1)
      {
      // Place your code here 
      if (new_unfiltered_data == 1) 
        {
        long filtered_output = 0;      // Variable storing one filtered data once at a time 
        
        // printf("newdata_in");
        j = filter_index;
        for (i = 0; i < 61; i++)
        {
            j = (j - i + 60) % 61;  // Circular buffer handling
            filtered_output += (long)adc_data[j] * B[i];    // B[61] is declared in fdacoef.h file
        }

        // Store filtered result
        filtered_data[sample_index-1] = filtered_output;

        // Update buffer and sample indices
        filter_index = (filter_index + 1) % 61;
        // sample_index += 1;
        // printf("%d", sample_index);
        putchar('A');
        new_unfiltered_data = 0; // set back to 0 and wait until new data input 
        
        // Test whether the sample_index could reach 127 
        }
        
      // If 127 samples are collected, transmit data to Serial port   
//      if (sample_index == SAMPLE_POINT)
//          {
//          // Transmit unfiltered and filtered data via USART   
//          for (k = 0; k < SAMPLE_POINT; k++)
//                {
//                trans_data(unfiltered_data[k]);  // Send unfiltered data
//                }
//
//          for (k = 0; k < SAMPLE_POINT; k++)
//                {
//                trans_data(filtered_data[k]);  // Send filtered data (scaled to fit)
//                }
//                
//          putchar(10);      // For MATLAB Receiver
//          
//          // Reset sample index for the next batch
//          sample_index = 0; 
//                
//          } 
      }
}
