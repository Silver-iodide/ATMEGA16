;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/19/2024
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// 1 Wire Bus interface functions
;#include <1wire.h>
;
;// DS1820 Temperature Sensor functions
;#include <ds1820.h>
;
;// Delay function
;#include <delay.h>
;
;// Declare your global variables here
;#define DQ_0    PORTC.7=0
;#define DQ_1    PORTC.7=1
;#define DQ_OUT  DDRC.7=1
;#define DQ_IN   DDRC.7=0
;#define DQ      PINC.7
;int counter = 0;
;
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 005E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005F char status,data;
; 0000 0060 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0061 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0062 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0063    {
; 0000 0064    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0065 #if RX_BUFFER_SIZE == 256
; 0000 0066    // special case for receiver buffer size=256
; 0000 0067    if (++rx_counter == 0)
; 0000 0068       {
; 0000 0069 #else
; 0000 006A    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 006B    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 006C       {
; 0000 006D       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 006E #endif
; 0000 006F       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0070       }
; 0000 0071    }
;PCODE: $0000002A VOL: 0
; 0000 0072 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0079 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 007A char data;
; 0000 007B while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 007C data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 007D #if RX_BUFFER_SIZE != 256
; 0000 007E if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 007F #endif
; 0000 0080 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0081 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0082 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0083 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0084 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0094 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0095 if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0096    {
; 0000 0097    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0098    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0099 #if TX_BUFFER_SIZE != 256
; 0000 009A    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 009B #endif
; 0000 009C    }
;PCODE: $0000005A VOL: 0
; 0000 009D }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00A4 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00A5 while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A6 #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 00A7 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A8    {
; 0000 00A9    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00AA #if TX_BUFFER_SIZE != 256
; 0000 00AB    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00AC #endif
; 0000 00AD    ++tx_counter;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00AE    }
; 0000 00AF else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00B0    UDR=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00B1 #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 00B2 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Function prototypes
;unsigned int read_tem(void);
;void display_tem(unsigned int tem);
;
;// Timer1 compare match interrupt service routine
;interrupt [TIM1_COMPA] void awesome(void)
; 0000 00BF {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C0 // Place your code here
; 0000 00C1 counter++;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C2 
; 0000 00C3 if (counter >= 2)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C4     {
; 0000 00C5     counter = 0;
;PCODE: $0000008E VOL: 0
; 0000 00C6     printf("INTERRUPT Triggered");
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00C7     display_tem(read_tem());
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00C8     }
; 0000 00C9 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;// Temperature sensor Reset Function
;void reset()
; 0000 00CD {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00CE DQ_OUT;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00CF DQ_0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00D0 // delay_us(480);
; 0000 00D1 delay_us(500);
;PCODE: $000000A3 VOL: 0
; 0000 00D2 DQ_1;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D3 delay_us(60);
;PCODE: $000000A6 VOL: 0
; 0000 00D4 DQ_IN;      // What happens if we don't have pull-up resistor?
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00D5 while(DQ);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00D6 while(!DQ);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00D7 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;
;// Sensor write function
;void write(unsigned char data)
; 0000 00DB {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00DC unsigned char i;
; 0000 00DD DQ_OUT;
;PCODE: $000000B9 VOL: 0
;	data -> Y+1
;	i -> R17
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00DE for (i = 0;i<8;i++)
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00DF     {
; 0000 00E0     DQ_0;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E1     delay_us(10);
;PCODE: $000000C7 VOL: 0
; 0000 00E2 
; 0000 00E3     if(data&0x01)
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00E4     {DQ_1;}
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00E5     else {DQ_0;}
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E6 
; 0000 00E7     delay_us(40);
;PCODE: $000000D2 VOL: 0
; 0000 00E8     DQ_1;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00E9     delay_us(1);
;PCODE: $000000D5 VOL: 0
; 0000 00EA     data >>= 1;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00EB 
; 0000 00EC     }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00ED 
; 0000 00EE }
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;
;// Sensor read function
;// Read the data sent from the sensor
;unsigned char read()
; 0000 00F3 {
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00F4 
; 0000 00F5 unsigned char i,temp;
; 0000 00F6 for(i=0;i<8;i++)
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;	i -> R17
;	temp -> R16
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F7     {
; 0000 00F8     // Initialize the sensor with low level input
; 0000 00F9     DQ_OUT;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00FA     DQ_0;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00FB     // I suppose the DQ might not receive 0 if there is no time delay.
; 0000 00FC     delay_us(2);
;PCODE: $000000F5 VOL: 0
; 0000 00FD     // set up the MCU by switching to input mode with pull-up resistor
; 0000 00FE     DQ_1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00FF     DQ_IN;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0100     // Read the PIN and determine the current bit value
; 0000 0101     if(DQ)
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0102         {
; 0000 0103         temp |= 0x80;}
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0104 
; 0000 0105     temp >>= 1;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0106     delay_us(45);
;PCODE: $00000104 VOL: 0
; 0000 0107     //
; 0000 0108     }
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0109 return temp;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 010A }
;PCODE: $0000010D VOL: 0
;
;// Read temperature function
;// OUTPUT: temperature unsigned int value
;unsigned int read_tem()
; 0000 010F {
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0110 unsigned int tem1, tem2;
; 0000 0111 reset();
;PCODE: $00000110 VOL: 0
;	tem1 -> R16,R17
;	tem2 -> R18,R19
;PCODE: $00000111 VOL: 0
; 0000 0112 write(0xCC);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0113 write(0x44);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0114 reset();
;PCODE: $00000118 VOL: 0
; 0000 0115 write(0xCC);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0116 write(0xBE);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0117 
; 0000 0118 tem1 = read();
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0119 tem2 = read();
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 011A return ((tem2<<8) | tem1) * 6.25;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 011B }
;PCODE: $0000012F VOL: 0
;
;// display temperature to monitor function
;void display_tem(unsigned int tem)
; 0000 011F {
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0120 int ten, one, dat, dat1;
; 0000 0121 ten = tem/1000 + 0x30;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;	tem -> Y+8
;	ten -> R16,R17
;	one -> R18,R19
;	dat -> R20,R21
;	dat1 -> Y+6
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0122 one = tem%1000/100 + 0x30;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0123 dat = tem%100/10 + 0x30;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0124 dat1= tem%10 + 0x30;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0125 
; 0000 0126 printf("T = ");
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0127 // lcd_putchar(ten);
; 0000 0128 putchar(one);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0129 putchar(dat);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 012A putchar(0x2E);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 012B putchar(dat1);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 012C printf("C");
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 012D }
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;
;
;// Declare your global variables here
;void main(void)
; 0000 0132 {
;PCODE: $0000016A VOL: 0
; 0000 0133 // Declare your local variables here
; 0000 0134 
; 0000 0135 // Input/Output Ports initialization
; 0000 0136 // Port A initialization
; 0000 0137 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0138 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0139 PORTA=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 013A DDRA=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 013B 
; 0000 013C // Port B initialization
; 0000 013D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 013E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 013F PORTB=0x00;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0140 DDRB=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0141 
; 0000 0142 // Port C initialization
; 0000 0143 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0144 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0145 PORTC=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0146 DDRC=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0147 
; 0000 0148 // Port D initialization
; 0000 0149 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 014A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 014B PORTD=0x00;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 014C DDRD=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 014D 
; 0000 014E // Timer/Counter 0 initialization
; 0000 014F // Clock source: System Clock
; 0000 0150 // Clock value: Timer 0 Stopped
; 0000 0151 // Mode: Normal top=0xFF
; 0000 0152 // OC0 output: Disconnected
; 0000 0153 TCCR0=0x00;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0154 TCNT0=0x00;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0155 OCR0=0x00;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0156 
; 0000 0157 // Timer/Counter 1 initialization
; 0000 0158 // Clock source: System Clock
; 0000 0159 // Clock value: 15.625 kHz
; 0000 015A // Mode: CTC top=OCR1A
; 0000 015B // OC1A output: Discon.
; 0000 015C // OC1B output: Discon.
; 0000 015D // Noise Canceler: Off
; 0000 015E // Input Capture on Falling Edge
; 0000 015F // Timer1 Overflow Interrupt: On
; 0000 0160 // Input Capture Interrupt: Off
; 0000 0161 // Compare A Match Interrupt: Off
; 0000 0162 // Compare B Match Interrupt: Off
; 0000 0163 TCCR1A=0x00;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0164 TCCR1B=0x0D;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0165 TCNT1H=0x00;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0166 TCNT1L=0x00;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0167 ICR1H=0x00;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0168 ICR1L=0x00;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0169 OCR1AH=0x98;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 016A OCR1AL=0x96;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 016B OCR1BH=0x00;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 016C OCR1BL=0x00;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 016D 
; 0000 016E // Timer/Counter 2 initialization
; 0000 016F // Clock source: System Clock
; 0000 0170 // Clock value: Timer2 Stopped
; 0000 0171 // Mode: Normal top=0xFF
; 0000 0172 // OC2 output: Disconnected
; 0000 0173 ASSR=0x00;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0174 TCCR2=0x00;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0175 TCNT2=0x00;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0176 OCR2=0x00;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0177 
; 0000 0178 // External Interrupt(s) initialization
; 0000 0179 // INT0: Off
; 0000 017A // INT1: Off
; 0000 017B // INT2: Off
; 0000 017C MCUCR=0x00;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 017D MCUCSR=0x00;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 017E 
; 0000 017F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0180 TIMSK |= (1 << OCIE1A);  // Enable Timer1 Compare Match A interrupt
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0181 
; 0000 0182 // USART initialization
; 0000 0183 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0184 // USART Receiver: On
; 0000 0185 // USART Transmitter: On
; 0000 0186 // USART Mode: Asynchronous
; 0000 0187 // USART Baud Rate: 9600
; 0000 0188 UCSRA=0x00;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0189 UCSRB=0xD8;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 018A UCSRC=0x86;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 018B UBRRH=0x00;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 018C UBRRL=0x67;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 018D 
; 0000 018E // Analog Comparator initialization
; 0000 018F // Analog Comparator: Off
; 0000 0190 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0191 ACSR=0x80;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0192 SFIOR=0x00;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0193 
; 0000 0194 // ADC initialization
; 0000 0195 // ADC disabled
; 0000 0196 ADCSRA=0x00;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0197 
; 0000 0198 // SPI initialization
; 0000 0199 // SPI disabled
; 0000 019A SPCR=0x00;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 019B 
; 0000 019C // TWI initialization
; 0000 019D // TWI disabled
; 0000 019E TWCR=0x00;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 019F 
; 0000 01A0 // 1 Wire Bus initialization
; 0000 01A1 // 1 Wire Data port: PORTC
; 0000 01A2 // 1 Wire Data bit: 7
; 0000 01A3 // Note: 1 Wire port settings must be specified in the
; 0000 01A4 // Project|Configure|C Compiler|Libraries|1 Wire IDE menu.
; 0000 01A5 w1_init();
;PCODE: $000001B8 VOL: 0
; 0000 01A6 
; 0000 01A7 // Global enable interrupts
; 0000 01A8 #asm("sei")
;PCODE: $000001B9 VOL: 0
	sei
;PCODE: $000001BA VOL: 0
; 0000 01A9 
; 0000 01AA while (1)
;PCODE: $000001BB VOL: 0
; 0000 01AB       {
; 0000 01AC       // Place your code here
; 0000 01AD       /*
; 0000 01AE       unsigned int tcnt1_value;
; 0000 01AF 
; 0000 01B0       tcnt1_value = TCNT1L;           // Read low byte first
; 0000 01B1       tcnt1_value |= (TCNT1H << 8);   // Read high byte and combine
; 0000 01B2 
; 0000 01B3       printf("TCNT1 Value: %u\n", tcnt1_value);
; 0000 01B4       delay_ms(1000);
; 0000 01B5       */
; 0000 01B6       }
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 01B7 }
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
