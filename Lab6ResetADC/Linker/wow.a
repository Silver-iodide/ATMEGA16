;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/23/2024
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;//#include <fdacoefs.h>
;//#include <tmwtypes.h>
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;#include <stdio.h>
;
;// Declare your global variables here
;#define ADC_VREF_TYPE 0x40
;char counter = 10;
;char SAMPLE_POINT = 127; // Number of data needed to be sent to serial port
;char new_unfiltered_data;
;// Buffer to store the last 61 samples, used for FIR conversion since there are only 61 coefficient exists
;unsigned int adc_data[61];
;
;unsigned int unfiltered_data[SAMPLE_POINT];  // Buffer to store 127 unfiltered samples
;long filtered_data[SAMPLE_POINT];            // Buffer to store 127 filtered samples
;
;char filter_index = 0;
;char sample_index = 0;
;unsigned char checkADCLoop = 0;
;char newdata = 0;
;// Storing FIR filter coefficients in Flash memory
;flash int B[61] = {
;        0,      1,      2,      3,      3,      0,     -9,    -25,    -50,
;      -85,   -129,   -179,   -229,   -271,   -292,   -279,   -217,    -91,
;      111,    399,    775,   1235,   1767,   2350,   2957,   3556,   4111,
;     4587,   4953,   5183,   5261,   5183,   4953,   4587,   4111,   3556,
;     2957,   2350,   1767,   1235,    775,    399,    111,    -91,   -217,
;     -279,   -292,   -271,   -229,   -179,   -129,    -85,    -50,    -25,
;       -9,      0,      3,      3,      2,      1,      0};
;
;
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 003E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003F // Place your code here
; 0000 0040 
; 0000 0041 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0048 {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0049 // Reinitialize Timer 0 value
; 0000 004A TCNT0=0xB2;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 004B // ToDo:
; 0000 004C // Status: Done
; 0000 004D counter--;
;PCODE: $00000016 VOL: 0
; 0000 004E 
; 0000 004F if (counter == 0)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0050     {
; 0000 0051     counter = 5;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0052     PORTA.2 = ~PORTA.2;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0053     }
; 0000 0054 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0058 {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0059 // Place your code here
; 0000 005A 
; 0000 005B }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;
;void trans_data(int xl)
; 0000 005F {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0060 unsigned char H5,L5;
; 0000 0061 unsigned int AD_x;
; 0000 0062 AD_x = xl & 0x3FFF;
;PCODE: $00000030 VOL: 0
;	xl -> Y+4
;	H5 -> R17
;	L5 -> R16
;	AD_x -> R18,R19
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0063 H5 = AD_x>>5;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0064 L5 = AD_x & 0x1F;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0065 putchar(L5+11);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0066 putchar(H5+51);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0067 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 006C {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006D unsigned int adc_data;
; 0000 006E // Read the AD conversion result
; 0000 006F adc_data=ADCW;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;	adc_data -> R16,R17
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0070 // Place your code here
; 0000 0071 // Check whether this mode could provide 500Hz data to serial port
; 0000 0072 newdata = 1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0073 checkADCLoop++;
;PCODE: $0000004F VOL: 0
; 0000 0074 
; 0000 0075 if (checkADCLoop == 127) {checkADCLoop = 0;}
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0076 
; 0000 0077 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 007C {
;PCODE: $00000059 VOL: 0
; 0000 007D // Declare your local variables here
; 0000 007E 
; 0000 007F // Input/Output Ports initialization
; 0000 0080 // Port A initialization
; 0000 0081 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0082 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0083 PORTA=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0084 DDRA=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0085 
; 0000 0086 // Port B initialization
; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0089 PORTB=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008A DDRB=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008B 
; 0000 008C // Port C initialization
; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008F PORTC=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0090 DDRC=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0091 
; 0000 0092 // Port D initialization
; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0094 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0095 PORTD=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0096 DDRD=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0097 
; 0000 0098 // Timer/Counter 0 initialization
; 0000 0099 // Clock source: System Clock
; 0000 009A // Clock value: 15.625 kHz
; 0000 009B // Mode: Normal top=0xFF
; 0000 009C // OC0 output: Disconnected
; 0000 009D TCCR0=0x05;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009E TCNT0=0xB2;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 009F OCR0=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A0 
; 0000 00A1 // Timer/Counter 1 initialization
; 0000 00A2 // Clock source: System Clock
; 0000 00A3 // Clock value: 2000.000 kHz
; 0000 00A4 // Mode: Ph. & fr. cor. PWM top=ICR1
; 0000 00A5 // OC1A output: Discon.
; 0000 00A6 // OC1B output: Discon.
; 0000 00A7 // Noise Canceler: Off
; 0000 00A8 // Input Capture on Falling Edge
; 0000 00A9 // Timer1 Overflow Interrupt: On
; 0000 00AA // Input Capture Interrupt: Off
; 0000 00AB // Compare A Match Interrupt: Off
; 0000 00AC // Compare B Match Interrupt: Off
; 0000 00AD //TCCR1A=0x00;
; 0000 00AE //TCCR1B=0x12;
; 0000 00AF //TCNT1H=0x00;
; 0000 00B0 //TCNT1L=0x00;
; 0000 00B1 //ICR1H=0x07;
; 0000 00B2 //ICR1L=0xD0;
; 0000 00B3 //OCR1AH=0x00;
; 0000 00B4 //OCR1AL=0x00;
; 0000 00B5 //OCR1BH=0x00;
; 0000 00B6 //OCR1BL=0xD0;
; 0000 00B7 
; 0000 00B8 // Timer/Counter 1 initialization
; 0000 00B9 // Clock source: System Clock
; 0000 00BA // Clock value: 16.000 MHz (with prescaler = 1)
; 0000 00BB // Mode: Normal top=0xFFFF
; 0000 00BC // OC1A output: Disconnected
; 0000 00BD // OC1B output: Disconnected
; 0000 00BE // Noise Canceler: Off
; 0000 00BF // Input Capture on Falling Edge
; 0000 00C0 // Timer1 Overflow Interrupt: On
; 0000 00C1 // Input Capture Interrupt: Off
; 0000 00C2 // Compare A Match Interrupt: Off
; 0000 00C3 // Compare B Match Interrupt: Off
; 0000 00C4 TCCR1A = 0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00C5 TCCR1B = 0x01;  // Set WGM12:0 to 0b000 for Normal mode, CS12:0 to 0b001 for prescaler = 1
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00C6 TCNT1H = 0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00C7 TCNT1L = 0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00C8 
; 0000 00C9 // Timer/Counter 2 initialization
; 0000 00CA // Clock source: System Clock
; 0000 00CB // Clock value: Timer2 Stopped
; 0000 00CC // Mode: Normal top=0xFF
; 0000 00CD // OC2 output: Disconnected
; 0000 00CE ASSR=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00CF TCCR2=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00D0 TCNT2=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00D1 OCR2=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00D2 
; 0000 00D3 // External Interrupt(s) initialization
; 0000 00D4 // INT0: On
; 0000 00D5 // INT0 Mode: Falling Edge
; 0000 00D6 // INT1: Off
; 0000 00D7 // INT2: Off
; 0000 00D8 GICR|=0x40;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00D9 MCUCR=0x02;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00DA MCUCSR=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00DB GIFR=0x40;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00DC 
; 0000 00DD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00DE TIMSK=0x05;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00DF 
; 0000 00E0 // USART initialization
; 0000 00E1 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00E2 // USART Receiver: On
; 0000 00E3 // USART Transmitter: On
; 0000 00E4 // USART Mode: Asynchronous
; 0000 00E5 // USART Baud Rate: 9600
; 0000 00E6 UCSRA=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00E7 UCSRB=0x18;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00E8 UCSRC=0x86;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00E9 UBRRH=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00EA UBRRL=0x67;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00EB 
; 0000 00EC // Analog Comparator initialization
; 0000 00ED // Analog Comparator: Off
; 0000 00EE // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00EF ACSR=0x80;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00F0 SFIOR=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00F1 
; 0000 00F2 // ADC initialization Not used!!!!!!!!!!!!!!!!!
; 0000 00F3 // ADC Clock frequency: 125.000 kHz
; 0000 00F4 // ADC Voltage Reference: AVCC pin
; 0000 00F5 // ADC Auto Trigger Source: Timer1 Capture Event
; 0000 00F6 //ADMUX=ADC_VREF_TYPE & 0xff;
; 0000 00F7 //ADCSRA=0xAF;
; 0000 00F8 //SFIOR&=0x1F;
; 0000 00F9 //SFIOR|=0xE0;
; 0000 00FA 
; 0000 00FB //  New ADC initialization
; 0000 00FC // ADC Clock frequency: 125.000 kHz
; 0000 00FD // ADC Voltage Reference: AVCC pin
; 0000 00FE // ADC Auto Trigger Source: Timer1 Overflow
; 0000 00FF ADMUX = ADC_VREF_TYPE & 0xff;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0100 ADCSRA = 0xAF;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0101 SFIOR &= 0x1F;  // Clear the ADTS bits
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0102 SFIOR |= 0x20;  // Set the ADTS to 0x20 for Timer1 Overflow
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0103 
; 0000 0104 
; 0000 0105 // SPI initialization
; 0000 0106 // SPI disabled
; 0000 0107 SPCR=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0108 
; 0000 0109 // TWI initialization
; 0000 010A // TWI disabled
; 0000 010B TWCR=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 010C 
; 0000 010D // Alphanumeric LCD initialization
; 0000 010E // Connections specified in the
; 0000 010F // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0110 // RS - PORTB Bit 0
; 0000 0111 // RD - PORTB Bit 1
; 0000 0112 // EN - PORTB Bit 2
; 0000 0113 // D4 - PORTD Bit 4
; 0000 0114 // D5 - PORTD Bit 5
; 0000 0115 // D6 - PORTD Bit 6
; 0000 0116 // D7 - PORTD Bit 7
; 0000 0117 // Characters/line: 16
; 0000 0118 lcd_init(16);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0119 
; 0000 011A // Global enable interrupts
; 0000 011B #asm("sei")
;PCODE: $000000AA VOL: 0
	sei
;PCODE: $000000AB VOL: 0
; 0000 011C 
; 0000 011D while (1)
;PCODE: $000000AC VOL: 0
; 0000 011E       {
; 0000 011F       // Place your code here
; 0000 0120       if (newdata == 1)
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0121         {
; 0000 0122         printf("%d", checkADCLoop);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0123         newdata = 0;
;PCODE: $000000BA VOL: 0
; 0000 0124         }
; 0000 0125       }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0126 }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
