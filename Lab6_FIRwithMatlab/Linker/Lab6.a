;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/20/2024
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;//#include <fdacoefs.h>
;//#include <tmwtypes.h>
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;#include <stdio.h>
;
;// Declare your global variables here
;#define ADC_VREF_TYPE 0x40
;char counter = 10;
;char SAMPLE_POINT = 127; // Number of data needed to be sent to serial port
;char new_unfiltered_data;
;// Buffer to store the last 61 samples, used for FIR conversion since there are only 61 coefficient exists
;unsigned int adc_data[61];
;
;unsigned int unfiltered_data[SAMPLE_POINT];  // Buffer to store 127 unfiltered samples
;long filtered_data[SAMPLE_POINT];            // Buffer to store 127 filtered samples
;
;char filter_index = 0;
;char sample_index = 0;
;
;// Storing FIR filter coefficients in Flash memory
;flash int B[61] = {
;        0,      1,      2,      3,      3,      0,     -9,    -25,    -50,
;      -85,   -129,   -179,   -229,   -271,   -292,   -279,   -217,    -91,
;      111,    399,    775,   1235,   1767,   2350,   2957,   3556,   4111,
;     4587,   4953,   5183,   5261,   5183,   4953,   4587,   4111,   3556,
;     2957,   2350,   1767,   1235,    775,    399,    111,    -91,   -217,
;     -279,   -292,   -271,   -229,   -179,   -129,    -85,    -50,    -25,
;       -9,      0,      3,      3,      2,      1,      0};
;
;
;
;/*****************************************
;External Interrupt 0 service routine:
;This is for changing the mode of FIR among
;Lowpass, highpass, bandpass, bandstop filter
;*******************************************/
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0040 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0041 // ToDo:
; 0000 0042 
; 0000 0043 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;
;/***********************************************
;Timer 0 overflow interrupt service routine
;Used for generating 10Hz square wave to PA2.
;************************************/
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 004B {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 004C // Reinitialize Timer 0 value
; 0000 004D TCNT0=0xB2;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 004E // ToDo:
; 0000 004F // Status: Done
; 0000 0050 counter--;
;PCODE: $00000016 VOL: 0
; 0000 0051 
; 0000 0052 if (counter == 0)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0053     {
; 0000 0054     counter = 10;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0055     PORTA.2 = ~PORTA.2;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0056     }
; 0000 0057 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;// Timer1 output compare A interrupt service routine
;// NOT USED since ADC is auto triggered by the Timer1 Compare Match
;//interrupt [TIM1_COMPA] void timer1_compa_isr(void)
;//{
;//
;//}
;
;
;void trans_data(int xl)
; 0000 0062 {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0063 unsigned char H5,L5;
; 0000 0064 unsigned int AD_x;
; 0000 0065 AD_x = xl & 0x3FFF;
;PCODE: $0000002B VOL: 0
;	xl -> Y+4
;	H5 -> R17
;	L5 -> R16
;	AD_x -> R18,R19
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0066 H5 = AD_x>>5;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0067 L5 = AD_x & 0x1F;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0068 putchar(L5+11);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0069 putchar(H5+51);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 006A }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;
;/*****************************
;ADC interrupt service routine:
;Do the AD conversion and perform the FIR filter operation.
;************************************************/
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0072 {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0073 // ToDo:
; 0000 0074 // Do the FIR filter operation and store both unfiltered and filtered data;
; 0000 0075 // After the filtered data reaches 127#, send both the original
; 0000 0076 // and filtered data to serial port
; 0000 0077 
; 0000 0078 unsigned int adc_value;        // Variable storing AD conversion result
; 0000 0079 
; 0000 007A // Read the AD conversion result
; 0000 007B adc_value = ADCW;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;	adc_value -> R16,R17
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 007C adc_data[filter_index] = adc_value;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 007D unfiltered_data[sample_index] = adc_value;  // Store unfiltered sample
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007E 
; 0000 007F sample_index++;
;PCODE: $00000054 VOL: 0
; 0000 0080 // Which condition to apply FIR? Answer: after adc_isr triggered, which represents new values has been plug in.
; 0000 0081 new_unfiltered_data = 1;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0082 // printf("%d", sample_index);
; 0000 0083 // main function checking frequency is much higher than the adc_isr
; 0000 0084 
; 0000 0085 }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;
;void main(void)
; 0000 0089 {
;PCODE: $0000005B VOL: 0
; 0000 008A // Declare your local variables here
; 0000 008B char i,j,k;
; 0000 008C // Input/Output Ports initialization
; 0000 008D // Port A initialization
; 0000 008E PORTA=0x00;
;	i -> R17
;	j -> R16
;	k -> R19
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008F DDRA=0x02;      // set PA2 as output
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0090 
; 0000 0091 // Port B initialization
; 0000 0092 PORTB=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0093 DDRB=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0094 
; 0000 0095 // Port C initialization
; 0000 0096 PORTC=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0097 DDRC=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0098 
; 0000 0099 // Port D initialization
; 0000 009A PORTD=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 009B DDRD=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 0 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: 15.625 kHz
; 0000 00A0 // Mode: Normal top=0xFF
; 0000 00A1 // OC0 output: Disconnected
; 0000 00A2 TCCR0=0x05;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00A3 TCNT0=0xB2;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A4 OCR0=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00A5 
; 0000 00A6 // Timer/Counter 1 initialization
; 0000 00A7 // Clock source: System Clock
; 0000 00A8 // Clock value: 62.500 kHz
; 0000 00A9 // Mode: CTC top=OCR1A
; 0000 00AA // OC1A output: Discon.
; 0000 00AB // OC1B output: Discon.
; 0000 00AC // Noise Canceler: Off
; 0000 00AD // Input Capture on Falling Edge
; 0000 00AE // Timer1 Overflow Interrupt: Off
; 0000 00AF // Input Capture Interrupt: Off
; 0000 00B0 // Compare A Match Interrupt: On
; 0000 00B1 // Compare B Match Interrupt: Off
; 0000 00B2 //TCCR1A=0x00;
; 0000 00B3 //TCCR1B=0x0C;
; 0000 00B4 //TCNT1H=0x00;
; 0000 00B5 //TCNT1L=0x00;
; 0000 00B6 //ICR1H=0x00;
; 0000 00B7 //ICR1L=0x00;
; 0000 00B8 //OCR1AH=0x00;
; 0000 00B9 //OCR1AL=0xF9;
; 0000 00BA //OCR1BH=0x00;
; 0000 00BB //OCR1BL=0xF9;
; 0000 00BC 
; 0000 00BD // Timer/Counter 1 initialization
; 0000 00BE // Clock source: System Clock
; 0000 00BF // Clock value: 62.500 kHz (F_CPU / 256)
; 0000 00C0 // Mode: CTC top=ICR1
; 0000 00C1 // OC1A output: Disconnected
; 0000 00C2 // OC1B output: Disconnected
; 0000 00C3 TCCR1A = 0x00; // CTC mode
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00C4 TCCR1B = 0x0C; // CTC mode with ICR1 as top, prescaler = 256
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00C5 TCNT1H = 0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00C6 TCNT1L = 0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00C7 ICR1H = 0x00;  // Set ICR1 to the desired top value
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00C8 ICR1L = 0xF9; // Set ICR1 to 249 for 250Hz
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C9 
; 0000 00CA // Timer/Counter 2 initialization
; 0000 00CB // Clock source: System Clock
; 0000 00CC // Clock value: Timer2 Stopped
; 0000 00CD // Mode: Normal top=0xFF
; 0000 00CE // OC2 output: Disconnected
; 0000 00CF ASSR=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00D0 TCCR2=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00D1 TCNT2=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00D2 OCR2=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00D3 
; 0000 00D4 // External Interrupt(s) initialization
; 0000 00D5 // INT0: On
; 0000 00D6 // INT0 Mode: Falling Edge
; 0000 00D7 // INT1: Off
; 0000 00D8 // INT2: Off
; 0000 00D9 GICR|=0x40;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00DA MCUCR=0x02;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00DB MCUCSR=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00DC GIFR=0x40;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00DD 
; 0000 00DE // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00DF TIMSK=0x11;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00E0 
; 0000 00E1 // USART initialization
; 0000 00E2 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00E3 // USART Receiver: On
; 0000 00E4 // USART Transmitter: On
; 0000 00E5 // USART Mode: Asynchronous
; 0000 00E6 // USART Baud Rate: 9600
; 0000 00E7 UCSRA=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00E8 UCSRB=0x18;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00E9 UCSRC=0x86;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00EA UBRRH=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00EB UBRRL=0x67;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00EC 
; 0000 00ED // Analog Comparator initialization
; 0000 00EE // Analog Comparator: Off
; 0000 00EF // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F0 ACSR=0x80;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00F1 SFIOR=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00F2 
; 0000 00F3 // ADC initialization
; 0000 00F4 // ADC Clock frequency: 250.000 kHz
; 0000 00F5 // ADC Voltage Reference: AVCC pin
; 0000 00F6 // ADC Auto Trigger Source: Timer1 Compare Match B
; 0000 00F7 ADMUX=(ADC_VREF_TYPE & 0xff) | (1 << MUX2) | (1 << MUX0);    //ADMUX |= (1 << 0) will set ADMUX's first bit to 1.
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00F8 ADCSRA=0xAE;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00F9 SFIOR&=0x1F;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00FA SFIOR|=0xE0;   // Change, I dont know what will happen!!!!!!!!!!!!!!!!!1
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00FB 
; 0000 00FC // SPI initialization
; 0000 00FD // SPI disabled
; 0000 00FE SPCR=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00FF 
; 0000 0100 // TWI initialization
; 0000 0101 // TWI disabled
; 0000 0102 TWCR=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0103 
; 0000 0104 // Alphanumeric LCD initialization
; 0000 0105 // Connections specified in the
; 0000 0106 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0107 // RS - PORTB Bit 0
; 0000 0108 // RD - PORTB Bit 1
; 0000 0109 // EN - PORTB Bit 2
; 0000 010A // D4 - PORTD Bit 4
; 0000 010B // D5 - PORTD Bit 5
; 0000 010C // D6 - PORTD Bit 6
; 0000 010D // D7 - PORTD Bit 7
; 0000 010E // Characters/line: 8
; 0000 010F lcd_init(8);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0110 
; 0000 0111 // Global enable interrupts
; 0000 0112 #asm("sei")
;PCODE: $000000B0 VOL: 0
	sei
;PCODE: $000000B1 VOL: 0
; 0000 0113 
; 0000 0114 while (1)
;PCODE: $000000B2 VOL: 0
; 0000 0115       {
; 0000 0116       // Place your code here
; 0000 0117       if (new_unfiltered_data == 1)
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0118         {
; 0000 0119         long filtered_output = 0;      // Variable storing one filtered data once at a time
; 0000 011A 
; 0000 011B         // printf("newdata_in");
; 0000 011C         j = filter_index;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;	filtered_output -> Y+0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 011D         for (i = 0; i < 61; i++)
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 011E         {
; 0000 011F             j = (j - i + 60) % 61;  // Circular buffer handling
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0120             filtered_output += (long)adc_data[j] * B[i];    // B[61] is declared in fdacoef.h file
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0121         }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0122 
; 0000 0123         // Store filtered result
; 0000 0124         filtered_data[sample_index-1] = filtered_output;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0125 
; 0000 0126         // Update buffer and sample indices
; 0000 0127         filter_index = (filter_index + 1) % 61;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0128         // sample_index += 1;
; 0000 0129         // printf("%d", sample_index);
; 0000 012A         putchar('A');
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 012B         new_unfiltered_data = 0; // set back to 0 and wait until new data input
;PCODE: $00000100 VOL: 0
; 0000 012C 
; 0000 012D         // Test whether the sample_index could reach 127
; 0000 012E         }
;PCODE: $00000101 VOL: 0
; 0000 012F 
; 0000 0130       // If 127 samples are collected, transmit data to Serial port
; 0000 0131 //      if (sample_index == SAMPLE_POINT)
; 0000 0132 //          {
; 0000 0133 //          // Transmit unfiltered and filtered data via USART
; 0000 0134 //          for (k = 0; k < SAMPLE_POINT; k++)
; 0000 0135 //                {
; 0000 0136 //                trans_data(unfiltered_data[k]);  // Send unfiltered data
; 0000 0137 //                }
; 0000 0138 //
; 0000 0139 //          for (k = 0; k < SAMPLE_POINT; k++)
; 0000 013A //                {
; 0000 013B //                trans_data(filtered_data[k]);  // Send filtered data (scaled to fit)
; 0000 013C //                }
; 0000 013D //
; 0000 013E //          putchar(10);      // For MATLAB Receiver
; 0000 013F //
; 0000 0140 //          // Reset sample index for the next batch
; 0000 0141 //          sample_index = 0;
; 0000 0142 //
; 0000 0143 //          }
; 0000 0144       }
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0145 }
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
