;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;interrupt [2] void ext_int0_isr(void)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025 // Place your code here
; 0000 0026 // ADMUX's 0-bit should be set to 0 to make it has the ADC0 as input
; 0000 0027 ADMUX.0 = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0028 lcd_clear();
;PCODE: $00000011 VOL: 0
; 0000 0029 lcd_putchar('A');
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002A lcd_putchar('D');
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002B lcd_putchar('C');
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002C lcd_putchar('0');
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002D lcd_putchar(':');
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002E lcd_putchar(' ');
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002F }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;interrupt [3] void ext_int1_isr(void)
; 0000 0034 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0035 // Place your code here
; 0000 0036 
; 0000 0037 // ADMUX's 0-bit should be set to 0 to make it has the ADC0 as input
; 0000 0038 ADMUX.0 = 1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0039 lcd_clear();
;PCODE: $00000025 VOL: 0
; 0000 003A lcd_putchar('A');
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003B lcd_putchar('D');
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003C lcd_putchar('C');
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003D lcd_putchar('1');
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003E lcd_putchar(':');
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003F lcd_putchar(' ');
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0040 
; 0000 0041 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;interrupt [10] void timer0_ovf_isr(void)
; 0000 0046 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0047 // Reinitialize Timer 0 value
; 0000 0048 TCNT0=0x83;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0049 // Place your code here
; 0000 004A 
; 0000 004B }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;interrupt [15] void adc_isr(void)
; 0000 0054 {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0055 unsigned int adc_data, adc_v;
; 0000 0056 char buffer[16];
; 0000 0057 
; 0000 0058 // Read the AD conversion result
; 0000 0059 adc_data=ADCW;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;	adc_data -> R16,R17
;	adc_v -> R18,R19
;	buffer -> Y+4
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005A // Place your code here
; 0000 005B adc_v = (unsigned long)adc_data*5000/1024;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005C 
; 0000 005D // Convert the actual voltage digital value to string
; 0000 005E sprintf(buffer, "%d", adc_v);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005F lcd_gotoxy(6,0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0060 lcd_puts(buffer);  // Print the voltage value on the LCD
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0061 
; 0000 0062 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;void main(void)
; 0000 0067 {
;PCODE: $00000061 VOL: 0
; 0000 0068 // Declare your local variables here
; 0000 0069 
; 0000 006A // Input/Output Ports initialization
; 0000 006B // Port A initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0070 
; 0000 0071 // Port B initialization
; 0000 0072 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0073 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0074 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0075 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0076 
; 0000 0077 // Port C initialization
; 0000 0078 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0079 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 007A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 007C 
; 0000 007D // Port D initialization
; 0000 007E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007F DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0080 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0081 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0082 
; 0000 0083 // Timer/Counter 0 initialization
; 0000 0084 // Clock source: System Clock
; 0000 0085 // Clock value: 62.500 kHz
; 0000 0086 // Mode: Normal top=0xFF
; 0000 0087 // OC0 output: Disconnected
; 0000 0088 // Timer Period: 2 ms
; 0000 0089 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 008A TCNT0=0x83;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 008B OCR0=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 008C 
; 0000 008D // Timer/Counter 1 initialization
; 0000 008E // Clock source: System Clock
; 0000 008F // Clock value: Timer1 Stopped
; 0000 0090 // Mode: Normal top=0xFFFF
; 0000 0091 // OC1A output: Disconnected
; 0000 0092 // OC1B output: Disconnected
; 0000 0093 // Noise Canceler: Off
; 0000 0094 // Input Capture on Falling Edge
; 0000 0095 // Timer1 Overflow Interrupt: Off
; 0000 0096 // Input Capture Interrupt: Off
; 0000 0097 // Compare A Match Interrupt: Off
; 0000 0098 // Compare B Match Interrupt: Off
; 0000 0099 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009B TCNT1H=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 009C TCNT1L=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 009D ICR1H=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 009E ICR1L=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 009F OCR1AH=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00A0 OCR1AL=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A1 OCR1BH=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A2 OCR1BL=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A3 
; 0000 00A4 // Timer/Counter 2 initialization
; 0000 00A5 // Clock source: System Clock
; 0000 00A6 // Clock value: Timer2 Stopped
; 0000 00A7 // Mode: Normal top=0xFF
; 0000 00A8 // OC2 output: Disconnected
; 0000 00A9 ASSR=0<<AS2;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00AA TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00AB TCNT2=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00AC OCR2=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AD 
; 0000 00AE // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AF TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B0 
; 0000 00B1 // External Interrupt(s) initialization
; 0000 00B2 // INT0: On
; 0000 00B3 // INT0 Mode: Falling Edge
; 0000 00B4 // INT1: On
; 0000 00B5 // INT1 Mode: Falling Edge
; 0000 00B6 // INT2: Off
; 0000 00B7 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B8 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B9 MCUCSR=(0<<ISC2);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00BA GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00BB 
; 0000 00BC // USART initialization
; 0000 00BD // USART disabled
; 0000 00BE UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00BF 
; 0000 00C0 // Analog Comparator initialization
; 0000 00C1 // Analog Comparator: Off
; 0000 00C2 // The Analog Comparator's positive input is
; 0000 00C3 // connected to the AIN0 pin
; 0000 00C4 // The Analog Comparator's negative input is
; 0000 00C5 // connected to the AIN1 pin
; 0000 00C6 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00C7 
; 0000 00C8 // ADC initialization
; 0000 00C9 // ADC Clock frequency: 125.000 kHz
; 0000 00CA // ADC Auto Trigger Source: Timer0 Overflow
; 0000 00CB // Select the ADC input used in interrupt mode: ADC0
; 0000 00CC ADMUX=ADC_VREF_TYPE | 0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00CD ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00CE SFIOR=(1<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00CF 
; 0000 00D0 // SPI initialization
; 0000 00D1 // SPI disabled
; 0000 00D2 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00D3 
; 0000 00D4 // TWI initialization
; 0000 00D5 // TWI disabled
; 0000 00D6 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00D7 
; 0000 00D8 // Alphanumeric LCD initialization
; 0000 00D9 // Connections are specified in the
; 0000 00DA // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00DB // RS: PORTB Bit 0
; 0000 00DC // RD: PORTB Bit 1
; 0000 00DD // EN: PORTB Bit 2
; 0000 00DE // D4: PORTD Bit 4
; 0000 00DF // D5: PORTD Bit 5
; 0000 00E0 // D6: PORTD Bit 6
; 0000 00E1 // D7: PORTD Bit 7
; 0000 00E2 // Characters/line: 8
; 0000 00E3 lcd_init(16);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00E4 
; 0000 00E5 // Globally enable interrupts
; 0000 00E6 #asm("sei")
;PCODE: $000000AF VOL: 0
; 0000 00E7 
; 0000 00E8 while (1)
;PCODE: $000000B0 VOL: 0
; 0000 00E9 {
; 0000 00EA // Place your code here
; 0000 00EB 
; 0000 00EC }
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00ED }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
