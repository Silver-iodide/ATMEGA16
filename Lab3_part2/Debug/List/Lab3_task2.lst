
AVRASM ver. 2.1.30  C:\cvavreval\BIN\Lab3_part2\Debug\List\Lab3_task2.asm Tue Aug 13 11:00:13 2024

C:\cvavreval\BIN\Lab3_part2\Debug\List\Lab3_task2.asm(1418): warning: Register r5 already defined by the .DEF directive
C:\cvavreval\BIN\Lab3_part2\Debug\List\Lab3_task2.asm(1419): warning: Register r4 already defined by the .DEF directive
C:\cvavreval\BIN\Lab3_part2\Debug\List\Lab3_task2.asm(1420): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.02 Evaluation
                 ;(C) Copyright 1998-2024 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0067 	JMP  _ext_int0_isr
000004 940c 006d 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0073 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0078 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6425
C:\cvavreval\BIN\Lab3_part2\Debug\List\Lab3_task2.asm(1458): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x25,0x64,0x0
                 _0x2020003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 0002      	.DW  0x02
000037 0160      	.DW  __base_y_G101
000038 006a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003a 94f8      	CLI
                 
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004d e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004f 9185      	LPM  R24,Z+
000050 9195      	LPM  R25,Z+
000051 9700      	SBIW R24,0
000052 f061      	BREQ __GLOBAL_INI_END
000053 91a5      	LPM  R26,Z+
000054 91b5      	LPM  R27,Z+
000055 9005      	LPM  R0,Z+
000056 9015      	LPM  R1,Z+
000057 01bf      	MOVW R22,R30
000058 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000059 9005      	LPM  R0,Z+
00005a 920d      	ST   X+,R0
00005b 9701      	SBIW R24,1
00005c f7e1      	BRNE __GLOBAL_INI_LOOP
00005d 01fb      	MOVW R30,R22
00005e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 00b3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;interrupt [2] void ext_int0_isr(void)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000067 d2b4      	RCALL SUBOPT_0x0
                 ; 0000 0025 // Place your code here
                 ; 0000 0026 // ADMUX's 0-bit should be set to 0 to make it has the ADC0 as input
                 ; 0000 0027 ADMUX.0 = 0;
000068 9838      	CBI  0x7,0
                 ; 0000 0028 lcd_clear();
000069 d2c0      	RCALL SUBOPT_0x1
                 ; 0000 0029 lcd_putchar('A');
                 ; 0000 002A lcd_putchar('D');
                 ; 0000 002B lcd_putchar('C');
                 ; 0000 002C lcd_putchar('0');
00006a e3a0      	LDI  R26,LOW(48)
00006b d2c5      	RCALL SUBOPT_0x2
                 ; 0000 002D lcd_putchar(':');
                 ; 0000 002E lcd_putchar(' ');
                 ; 0000 002F }
00006c c038      	RJMP _0xB
                 ; .FEND
                 ;interrupt [3] void ext_int1_isr(void)
                 ; 0000 0034 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00006d d2ae      	RCALL SUBOPT_0x0
                 ; 0000 0035 // Place your code here
                 ; 0000 0036 
                 ; 0000 0037 // ADMUX's 0-bit should be set to 0 to make it has the ADC0 as input
                 ; 0000 0038 ADMUX.0 = 1;
00006e 9a38      	SBI  0x7,0
                 ; 0000 0039 lcd_clear();
00006f d2ba      	RCALL SUBOPT_0x1
                 ; 0000 003A lcd_putchar('A');
                 ; 0000 003B lcd_putchar('D');
                 ; 0000 003C lcd_putchar('C');
                 ; 0000 003D lcd_putchar('1');
000070 e3a1      	LDI  R26,LOW(49)
000071 d2bf      	RCALL SUBOPT_0x2
                 ; 0000 003E lcd_putchar(':');
                 ; 0000 003F lcd_putchar(' ');
                 ; 0000 0040 
                 ; 0000 0041 }
000072 c032      	RJMP _0xB
                 ; .FEND
                 ;interrupt [10] void timer0_ovf_isr(void)
                 ; 0000 0046 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000073 93ea      	ST   -Y,R30
                 ; 0000 0047 // Reinitialize Timer 0 value
                 ; 0000 0048 TCNT0=0x83;
000074 e8e3      	LDI  R30,LOW(131)
000075 bfe2      	OUT  0x32,R30
                 ; 0000 0049 // Place your code here
                 ; 0000 004A 
                 ; 0000 004B }
000076 91e9      	LD   R30,Y+
000077 9518      	RETI
                 ; .FEND
                 ;interrupt [15] void adc_isr(void)
                 ; 0000 0054 {
                 _adc_isr:
                 ; .FSTART _adc_isr
000078 d2a3      	RCALL SUBOPT_0x0
                 ; 0000 0055 unsigned int adc_data, adc_v;
                 ; 0000 0056 char buffer[16];
                 ; 0000 0057 
                 ; 0000 0058 // Read the AD conversion result
                 ; 0000 0059 adc_data=ADCW;
000079 9760      	SBIW R28,16
00007a d2f0      	RCALL __SAVELOCR4
                 ;	adc_data -> R16,R17
                 ;	adc_v -> R18,R19
                 ;	buffer -> Y+4
                +
00007b b104     +IN R16 , 4
00007c b115     +IN R17 , 4 + 1
                 	__INWR 16,17,4
                 ; 0000 005A // Place your code here
                 ; 0000 005B adc_v = (unsigned long)adc_data*5000/1024;
00007d 01d8      	MOVW R26,R16
00007e 2788      	CLR  R24
00007f 2799      	CLR  R25
                +
000080 e8e8     +LDI R30 , LOW ( 0x1388 )
000081 e1f3     +LDI R31 , HIGH ( 0x1388 )
000082 e060     +LDI R22 , BYTE3 ( 0x1388 )
000083 e070     +LDI R23 , BYTE4 ( 0x1388 )
                 	__GETD1N 0x1388
000084 d2f6      	RCALL __MULD12U
000085 01df      	MOVW R26,R30
000086 01cb      	MOVW R24,R22
                +
000087 e0e0     +LDI R30 , LOW ( 0x400 )
000088 e0f4     +LDI R31 , HIGH ( 0x400 )
000089 e060     +LDI R22 , BYTE3 ( 0x400 )
00008a e070     +LDI R23 , BYTE4 ( 0x400 )
                 	__GETD1N 0x400
00008b d30f      	RCALL __DIVD21U
00008c 019f      	MOVW R18,R30
                 ; 0000 005C 
                 ; 0000 005D // Convert the actual voltage digital value to string
                 ; 0000 005E sprintf(buffer, "%d", adc_v);
00008d 01fe      	MOVW R30,R28
00008e 9634      	ADIW R30,4
00008f 93fa      	ST   -Y,R31
000090 93ea      	ST   -Y,R30
                +
000091 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000092 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000093 93fa      	ST   -Y,R31
000094 93ea      	ST   -Y,R30
000095 01f9      	MOVW R30,R18
000096 2766      	CLR  R22
000097 2777      	CLR  R23
000098 d32a      	RCALL __PUTPARD1
000099 e084      	LDI  R24,4
00009a d1a5      	RCALL _sprintf
00009b 9628      	ADIW R28,8
                 ; 0000 005F lcd_gotoxy(6,0);
00009c e0e6      	LDI  R30,LOW(6)
00009d 93ea      	ST   -Y,R30
00009e e0a0      	LDI  R26,LOW(0)
00009f d1fa      	RCALL _lcd_gotoxy
                 ; 0000 0060 lcd_puts(buffer);  // Print the voltage value on the LCD
0000a0 01de      	MOVW R26,R28
0000a1 9614      	ADIW R26,4
0000a2 d226      	RCALL _lcd_puts
                 ; 0000 0061 
                 ; 0000 0062 }
0000a3 d2ce      	RCALL __LOADLOCR4
0000a4 9664      	ADIW R28,20
                 _0xB:
0000a5 91e9      	LD   R30,Y+
0000a6 bfef      	OUT  SREG,R30
0000a7 91f9      	LD   R31,Y+
0000a8 91e9      	LD   R30,Y+
0000a9 91b9      	LD   R27,Y+
0000aa 91a9      	LD   R26,Y+
0000ab 9199      	LD   R25,Y+
0000ac 9189      	LD   R24,Y+
0000ad 9179      	LD   R23,Y+
0000ae 9169      	LD   R22,Y+
0000af 90f9      	LD   R15,Y+
0000b0 9019      	LD   R1,Y+
0000b1 9009      	LD   R0,Y+
0000b2 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0067 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0068 // Declare your local variables here
                 ; 0000 0069 
                 ; 0000 006A // Input/Output Ports initialization
                 ; 0000 006B // Port A initialization
                 ; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 bbea      	OUT  0x1A,R30
                 ; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000b5 bbeb      	OUT  0x1B,R30
                 ; 0000 0070 
                 ; 0000 0071 // Port B initialization
                 ; 0000 0072 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0073 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000b6 bbe7      	OUT  0x17,R30
                 ; 0000 0074 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0075 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b7 bbe8      	OUT  0x18,R30
                 ; 0000 0076 
                 ; 0000 0077 // Port C initialization
                 ; 0000 0078 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0079 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000b8 bbe4      	OUT  0x14,R30
                 ; 0000 007A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b9 bbe5      	OUT  0x15,R30
                 ; 0000 007C 
                 ; 0000 007D // Port D initialization
                 ; 0000 007E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007F DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000ba bbe1      	OUT  0x11,R30
                 ; 0000 0080 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0081 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000bb bbe2      	OUT  0x12,R30
                 ; 0000 0082 
                 ; 0000 0083 // Timer/Counter 0 initialization
                 ; 0000 0084 // Clock source: System Clock
                 ; 0000 0085 // Clock value: 62.500 kHz
                 ; 0000 0086 // Mode: Normal top=0xFF
                 ; 0000 0087 // OC0 output: Disconnected
                 ; 0000 0088 // Timer Period: 2 ms
                 ; 0000 0089 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
0000bc e0e4      	LDI  R30,LOW(4)
0000bd bfe3      	OUT  0x33,R30
                 ; 0000 008A TCNT0=0x83;
0000be e8e3      	LDI  R30,LOW(131)
0000bf bfe2      	OUT  0x32,R30
                 ; 0000 008B OCR0=0x00;
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 bfec      	OUT  0x3C,R30
                 ; 0000 008C 
                 ; 0000 008D // Timer/Counter 1 initialization
                 ; 0000 008E // Clock source: System Clock
                 ; 0000 008F // Clock value: Timer1 Stopped
                 ; 0000 0090 // Mode: Normal top=0xFFFF
                 ; 0000 0091 // OC1A output: Disconnected
                 ; 0000 0092 // OC1B output: Disconnected
                 ; 0000 0093 // Noise Canceler: Off
                 ; 0000 0094 // Input Capture on Falling Edge
                 ; 0000 0095 // Timer1 Overflow Interrupt: Off
                 ; 0000 0096 // Input Capture Interrupt: Off
                 ; 0000 0097 // Compare A Match Interrupt: Off
                 ; 0000 0098 // Compare B Match Interrupt: Off
                 ; 0000 0099 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c2 bdef      	OUT  0x2F,R30
                 ; 0000 009A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000c3 bdee      	OUT  0x2E,R30
                 ; 0000 009B TCNT1H=0x00;
0000c4 bded      	OUT  0x2D,R30
                 ; 0000 009C TCNT1L=0x00;
0000c5 bdec      	OUT  0x2C,R30
                 ; 0000 009D ICR1H=0x00;
0000c6 bde7      	OUT  0x27,R30
                 ; 0000 009E ICR1L=0x00;
0000c7 bde6      	OUT  0x26,R30
                 ; 0000 009F OCR1AH=0x00;
0000c8 bdeb      	OUT  0x2B,R30
                 ; 0000 00A0 OCR1AL=0x00;
0000c9 bdea      	OUT  0x2A,R30
                 ; 0000 00A1 OCR1BH=0x00;
0000ca bde9      	OUT  0x29,R30
                 ; 0000 00A2 OCR1BL=0x00;
0000cb bde8      	OUT  0x28,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // Timer/Counter 2 initialization
                 ; 0000 00A5 // Clock source: System Clock
                 ; 0000 00A6 // Clock value: Timer2 Stopped
                 ; 0000 00A7 // Mode: Normal top=0xFF
                 ; 0000 00A8 // OC2 output: Disconnected
                 ; 0000 00A9 ASSR=0<<AS2;
0000cc bde2      	OUT  0x22,R30
                 ; 0000 00AA TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000cd bde5      	OUT  0x25,R30
                 ; 0000 00AB TCNT2=0x00;
0000ce bde4      	OUT  0x24,R30
                 ; 0000 00AC OCR2=0x00;
0000cf bde3      	OUT  0x23,R30
                 ; 0000 00AD 
                 ; 0000 00AE // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00AF TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000d0 e0e1      	LDI  R30,LOW(1)
0000d1 bfe9      	OUT  0x39,R30
                 ; 0000 00B0 
                 ; 0000 00B1 // External Interrupt(s) initialization
                 ; 0000 00B2 // INT0: On
                 ; 0000 00B3 // INT0 Mode: Falling Edge
                 ; 0000 00B4 // INT1: On
                 ; 0000 00B5 // INT1 Mode: Falling Edge
                 ; 0000 00B6 // INT2: Off
                 ; 0000 00B7 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
0000d2 b7eb      	IN   R30,0x3B
0000d3 6ce0      	ORI  R30,LOW(0xC0)
0000d4 bfeb      	OUT  0x3B,R30
                 ; 0000 00B8 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0000d5 e0ea      	LDI  R30,LOW(10)
0000d6 bfe5      	OUT  0x35,R30
                 ; 0000 00B9 MCUCSR=(0<<ISC2);
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bfe4      	OUT  0x34,R30
                 ; 0000 00BA GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000d9 ece0      	LDI  R30,LOW(192)
0000da bfea      	OUT  0x3A,R30
                 ; 0000 00BB 
                 ; 0000 00BC // USART initialization
                 ; 0000 00BD // USART disabled
                 ; 0000 00BE UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000db e0e0      	LDI  R30,LOW(0)
0000dc b9ea      	OUT  0xA,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Analog Comparator initialization
                 ; 0000 00C1 // Analog Comparator: Off
                 ; 0000 00C2 // The Analog Comparator's positive input is
                 ; 0000 00C3 // connected to the AIN0 pin
                 ; 0000 00C4 // The Analog Comparator's negative input is
                 ; 0000 00C5 // connected to the AIN1 pin
                 ; 0000 00C6 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000dd e8e0      	LDI  R30,LOW(128)
0000de b9e8      	OUT  0x8,R30
                 ; 0000 00C7 
                 ; 0000 00C8 // ADC initialization
                 ; 0000 00C9 // ADC Clock frequency: 125.000 kHz
                 ; 0000 00CA // ADC Auto Trigger Source: Timer0 Overflow
                 ; 0000 00CB // Select the ADC input used in interrupt mode: ADC0
                 ; 0000 00CC ADMUX=ADC_VREF_TYPE | 0;
0000df e4e0      	LDI  R30,LOW(64)
0000e0 b9e7      	OUT  0x7,R30
                 ; 0000 00CD ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000e1 eaef      	LDI  R30,LOW(175)
0000e2 b9e6      	OUT  0x6,R30
                 ; 0000 00CE SFIOR=(1<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000e3 e8e0      	LDI  R30,LOW(128)
0000e4 bfe0      	OUT  0x30,R30
                 ; 0000 00CF 
                 ; 0000 00D0 // SPI initialization
                 ; 0000 00D1 // SPI disabled
                 ; 0000 00D2 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 b9ed      	OUT  0xD,R30
                 ; 0000 00D3 
                 ; 0000 00D4 // TWI initialization
                 ; 0000 00D5 // TWI disabled
                 ; 0000 00D6 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000e7 bfe6      	OUT  0x36,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // Alphanumeric LCD initialization
                 ; 0000 00D9 // Connections are specified in the
                 ; 0000 00DA // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00DB // RS: PORTB Bit 0
                 ; 0000 00DC // RD: PORTB Bit 1
                 ; 0000 00DD // EN: PORTB Bit 2
                 ; 0000 00DE // D4: PORTD Bit 4
                 ; 0000 00DF // D5: PORTD Bit 5
                 ; 0000 00E0 // D6: PORTD Bit 6
                 ; 0000 00E1 // D7: PORTD Bit 7
                 ; 0000 00E2 // Characters/line: 8
                 ; 0000 00E3 lcd_init(16);
0000e8 e1a0      	LDI  R26,LOW(16)
0000e9 d1ee      	RCALL _lcd_init
                 ; 0000 00E4 
                 ; 0000 00E5 // Globally enable interrupts
                 ; 0000 00E6 #asm("sei")
0000ea 9478      	SEI
                 ; 0000 00E7 
                 ; 0000 00E8 while (1)
                 _0x7:
                 ; 0000 00E9 {
                 ; 0000 00EA // Place your code here
                 ; 0000 00EB 
                 ; 0000 00EC }
0000eb cfff      	RJMP _0x7
                 ; 0000 00ED }
                 _0xA:
0000ec cfff      	RJMP _0xA
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000ed d27b      	RCALL __SAVELOCR6
0000ee 019d      	MOVW R18,R26
0000ef 815e      	LDD  R21,Y+6
0000f0 9612      	ADIW R26,2
                +
0000f1 91ed     +LD R30 , X +
0000f2 91fc     +LD R31 , X
0000f3 9711     +SBIW R26 , 1
                 	__GETW1P
0000f4 9730      	SBIW R30,0
0000f5 f0e9      	BREQ _0x2000010
0000f6 01d9      	MOVW R26,R18
0000f7 d23e      	RCALL SUBOPT_0x3
0000f8 018f      	MOVW R16,R30
0000f9 9730      	SBIW R30,0
0000fa f059      	BREQ _0x2000012
                +
0000fb 3002     +CPI R16 , LOW ( 2 )
0000fc e0e0     +LDI R30 , HIGH ( 2 )
0000fd 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000fe f060      	BRLO _0x2000013
0000ff 01f8      	MOVW R30,R16
000100 9731      	SBIW R30,1
000101 018f      	MOVW R16,R30
                +
000102 01d9     +MOVW R26 , R18
000103 9614     +ADIW R26 , 4
000104 93ed     +ST X + , R30
000105 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000012:
000106 01d9      	MOVW R26,R18
000107 9612      	ADIW R26,2
000108 d232      	RCALL SUBOPT_0x4
000109 9731      	SBIW R30,1
00010a 8350      	ST   Z,R21
                 _0x2000013:
00010b 01d9      	MOVW R26,R18
                +
00010c 91ed     +LD R30 , X +
00010d 91fc     +LD R31 , X
00010e 9711     +SBIW R26 , 1
                 	__GETW1P
00010f 23ff      	TST  R31
000110 f00a      	BRMI _0x2000014
000111 d229      	RCALL SUBOPT_0x4
                 _0x2000014:
000112 c005      	RJMP _0x2000015
                 _0x2000010:
000113 01d9      	MOVW R26,R18
000114 efef      	LDI  R30,LOW(65535)
000115 efff      	LDI  R31,HIGH(65535)
000116 93ed      	ST   X+,R30
000117 93fc      	ST   X,R31
                 _0x2000015:
000118 d257      	RCALL __LOADLOCR6
000119 9627      	ADIW R28,7
00011a 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00011b 93ba      	ST   -Y,R27
00011c 93aa      	ST   -Y,R26
00011d 9726      	SBIW R28,6
00011e d24a      	RCALL __SAVELOCR6
00011f e010      	LDI  R17,0
000120 85ac      	LDD  R26,Y+12
000121 85bd      	LDD  R27,Y+12+1
000122 e0e0      	LDI  R30,LOW(0)
000123 e0f0      	LDI  R31,HIGH(0)
000124 93ed      	ST   X+,R30
000125 93fc      	ST   X,R31
                 _0x2000016:
000126 89ea      	LDD  R30,Y+18
000127 89fb      	LDD  R31,Y+18+1
000128 9631      	ADIW R30,1
000129 8bea      	STD  Y+18,R30
00012a 8bfb      	STD  Y+18+1,R31
00012b 9731      	SBIW R30,1
00012c 91e4      	LPM  R30,Z
00012d 2f2e      	MOV  R18,R30
00012e 30e0      	CPI  R30,0
00012f f409      	BRNE PC+2
000130 c108      	RJMP _0x2000018
000131 2fe1      	MOV  R30,R17
000132 30e0      	CPI  R30,0
000133 f431      	BRNE _0x200001C
000134 3225      	CPI  R18,37
000135 f411      	BRNE _0x200001D
000136 e011      	LDI  R17,LOW(1)
000137 c001      	RJMP _0x200001E
                 _0x200001D:
000138 d208      	RCALL SUBOPT_0x5
                 _0x200001E:
000139 c0fe      	RJMP _0x200001B
                 _0x200001C:
00013a 30e1      	CPI  R30,LOW(0x1)
00013b f4a1      	BRNE _0x200001F
00013c 3225      	CPI  R18,37
00013d f411      	BRNE _0x2000020
00013e d202      	RCALL SUBOPT_0x5
00013f c0f7      	RJMP _0x20000CC
                 _0x2000020:
000140 e012      	LDI  R17,LOW(2)
000141 e040      	LDI  R20,LOW(0)
000142 e000      	LDI  R16,LOW(0)
000143 322d      	CPI  R18,45
000144 f411      	BRNE _0x2000021
000145 e001      	LDI  R16,LOW(1)
000146 c0f1      	RJMP _0x200001B
                 _0x2000021:
000147 322b      	CPI  R18,43
000148 f411      	BRNE _0x2000022
000149 e24b      	LDI  R20,LOW(43)
00014a c0ed      	RJMP _0x200001B
                 _0x2000022:
00014b 3220      	CPI  R18,32
00014c f411      	BRNE _0x2000023
00014d e240      	LDI  R20,LOW(32)
00014e c0e9      	RJMP _0x200001B
                 _0x2000023:
00014f c002      	RJMP _0x2000024
                 _0x200001F:
000150 30e2      	CPI  R30,LOW(0x2)
000151 f439      	BRNE _0x2000025
                 _0x2000024:
000152 e050      	LDI  R21,LOW(0)
000153 e013      	LDI  R17,LOW(3)
000154 3320      	CPI  R18,48
000155 f411      	BRNE _0x2000026
000156 6800      	ORI  R16,LOW(128)
000157 c0e0      	RJMP _0x200001B
                 _0x2000026:
000158 c003      	RJMP _0x2000027
                 _0x2000025:
000159 30e3      	CPI  R30,LOW(0x3)
00015a f009      	BREQ PC+2
00015b c0dc      	RJMP _0x200001B
                 _0x2000027:
00015c 3320      	CPI  R18,48
00015d f010      	BRLO _0x200002A
00015e 332a      	CPI  R18,58
00015f f008      	BRLO _0x200002B
                 _0x200002A:
000160 c007      	RJMP _0x2000029
                 _0x200002B:
000161 e0aa      	LDI  R26,LOW(10)
000162 9f5a      	MUL  R21,R26
000163 2d50      	MOV  R21,R0
000164 2fe2      	MOV  R30,R18
000165 53e0      	SUBI R30,LOW(48)
000166 0f5e      	ADD  R21,R30
000167 c0d0      	RJMP _0x200001B
                 _0x2000029:
000168 2fe2      	MOV  R30,R18
000169 36e3      	CPI  R30,LOW(0x63)
00016a f439      	BRNE _0x200002F
00016b d1dc      	RCALL SUBOPT_0x6
00016c 89e8      	LDD  R30,Y+16
00016d 89f9      	LDD  R31,Y+16+1
00016e 81a4      	LDD  R26,Z+4
00016f 93aa      	ST   -Y,R26
000170 d1dd      	RCALL SUBOPT_0x7
000171 c0c5      	RJMP _0x2000030
                 _0x200002F:
000172 37e3      	CPI  R30,LOW(0x73)
000173 f429      	BRNE _0x2000032
000174 d1d3      	RCALL SUBOPT_0x6
000175 d1de      	RCALL SUBOPT_0x8
000176 d18c      	RCALL _strlen
000177 2f1e      	MOV  R17,R30
000178 c007      	RJMP _0x2000033
                 _0x2000032:
000179 37e0      	CPI  R30,LOW(0x70)
00017a f449      	BRNE _0x2000035
00017b d1cc      	RCALL SUBOPT_0x6
00017c d1d7      	RCALL SUBOPT_0x8
00017d d191      	RCALL _strlenf
00017e 2f1e      	MOV  R17,R30
00017f 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000180 6002      	ORI  R16,LOW(2)
000181 770f      	ANDI R16,LOW(127)
000182 e030      	LDI  R19,LOW(0)
000183 c037      	RJMP _0x2000036
                 _0x2000035:
000184 36e4      	CPI  R30,LOW(0x64)
000185 f011      	BREQ _0x2000039
000186 36e9      	CPI  R30,LOW(0x69)
000187 f411      	BRNE _0x200003A
                 _0x2000039:
000188 6004      	ORI  R16,LOW(4)
000189 c002      	RJMP _0x200003B
                 _0x200003A:
00018a 37e5      	CPI  R30,LOW(0x75)
00018b f431      	BRNE _0x200003C
                 _0x200003B:
00018c e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00018d e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00018e 83ee      	STD  Y+6,R30
00018f 83ff      	STD  Y+6+1,R31
000190 e015      	LDI  R17,LOW(5)
000191 c00c      	RJMP _0x200003D
                 _0x200003C:
000192 35e8      	CPI  R30,LOW(0x58)
000193 f411      	BRNE _0x200003F
000194 6008      	ORI  R16,LOW(8)
000195 c003      	RJMP _0x2000040
                 _0x200003F:
000196 37e8      	CPI  R30,LOW(0x78)
000197 f009      	BREQ PC+2
000198 c09e      	RJMP _0x2000071
                 _0x2000040:
000199 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00019a e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00019b 83ee      	STD  Y+6,R30
00019c 83ff      	STD  Y+6+1,R31
00019d e014      	LDI  R17,LOW(4)
                 _0x200003D:
00019e ff02      	SBRS R16,2
00019f c015      	RJMP _0x2000042
0001a0 d1a7      	RCALL SUBOPT_0x6
0001a1 89a8      	LDD  R26,Y+16
0001a2 89b9      	LDD  R27,Y+16+1
0001a3 9614      	ADIW R26,4
0001a4 91ed      	LD   R30,X+
0001a5 91fd      	LD   R31,X+
0001a6 87ea      	STD  Y+10,R30
0001a7 87fb      	STD  Y+10+1,R31
0001a8 85ab      	LDD  R26,Y+11
0001a9 23aa      	TST  R26
0001aa f422      	BRPL _0x2000043
0001ab d1cb      	RCALL __ANEGW1
0001ac 87ea      	STD  Y+10,R30
0001ad 87fb      	STD  Y+10+1,R31
0001ae e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001af 3040      	CPI  R20,0
0001b0 f011      	BREQ _0x2000044
0001b1 5f1f      	SUBI R17,-LOW(1)
0001b2 c001      	RJMP _0x2000045
                 _0x2000044:
0001b3 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001b4 c006      	RJMP _0x2000046
                 _0x2000042:
0001b5 d192      	RCALL SUBOPT_0x6
0001b6 89a8      	LDD  R26,Y+16
0001b7 89b9      	LDD  R27,Y+16+1
0001b8 d17d      	RCALL SUBOPT_0x3
0001b9 87ea      	STD  Y+10,R30
0001ba 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
0001bb fd00      	SBRC R16,0
0001bc c010      	RJMP _0x2000047
                 _0x2000048:
0001bd 1715      	CP   R17,R21
0001be f470      	BRSH _0x200004A
0001bf ff07      	SBRS R16,7
0001c0 c008      	RJMP _0x200004B
0001c1 ff02      	SBRS R16,2
0001c2 c004      	RJMP _0x200004C
0001c3 7f0b      	ANDI R16,LOW(251)
0001c4 2f24      	MOV  R18,R20
0001c5 5011      	SUBI R17,LOW(1)
0001c6 c001      	RJMP _0x200004D
                 _0x200004C:
0001c7 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001c8 c001      	RJMP _0x200004E
                 _0x200004B:
0001c9 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001ca d176      	RCALL SUBOPT_0x5
0001cb 5051      	SUBI R21,LOW(1)
0001cc cff0      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001cd 2f31      	MOV  R19,R17
0001ce ff01      	SBRS R16,1
0001cf c016      	RJMP _0x200004F
                 _0x2000050:
0001d0 3030      	CPI  R19,0
0001d1 f099      	BREQ _0x2000052
0001d2 ff03      	SBRS R16,3
0001d3 c006      	RJMP _0x2000053
0001d4 81ee      	LDD  R30,Y+6
0001d5 81ff      	LDD  R31,Y+6+1
0001d6 9125      	LPM  R18,Z+
0001d7 83ee      	STD  Y+6,R30
0001d8 83ff      	STD  Y+6+1,R31
0001d9 c005      	RJMP _0x2000054
                 _0x2000053:
0001da 81ae      	LDD  R26,Y+6
0001db 81bf      	LDD  R27,Y+6+1
0001dc 912d      	LD   R18,X+
0001dd 83ae      	STD  Y+6,R26
0001de 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001df d161      	RCALL SUBOPT_0x5
0001e0 3050      	CPI  R21,0
0001e1 f009      	BREQ _0x2000055
0001e2 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001e3 5031      	SUBI R19,LOW(1)
0001e4 cfeb      	RJMP _0x2000050
                 _0x2000052:
0001e5 c048      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001e6 e320      	LDI  R18,LOW(48)
0001e7 81ee      	LDD  R30,Y+6
0001e8 81ff      	LDD  R31,Y+6+1
0001e9 d1d5      	RCALL __GETW1PF
0001ea 87e8      	STD  Y+8,R30
0001eb 87f9      	STD  Y+8+1,R31
0001ec 81ee      	LDD  R30,Y+6
0001ed 81ff      	LDD  R31,Y+6+1
0001ee 9632      	ADIW R30,2
0001ef 83ee      	STD  Y+6,R30
0001f0 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001f1 85e8      	LDD  R30,Y+8
0001f2 85f9      	LDD  R31,Y+8+1
0001f3 85aa      	LDD  R26,Y+10
0001f4 85bb      	LDD  R27,Y+10+1
0001f5 17ae      	CP   R26,R30
0001f6 07bf      	CPC  R27,R31
0001f7 f050      	BRLO _0x200005C
0001f8 5f2f      	SUBI R18,-LOW(1)
0001f9 85a8      	LDD  R26,Y+8
0001fa 85b9      	LDD  R27,Y+8+1
0001fb 85ea      	LDD  R30,Y+10
0001fc 85fb      	LDD  R31,Y+10+1
0001fd 1bea      	SUB  R30,R26
0001fe 0bfb      	SBC  R31,R27
0001ff 87ea      	STD  Y+10,R30
000200 87fb      	STD  Y+10+1,R31
000201 cfef      	RJMP _0x200005A
                 _0x200005C:
000202 332a      	CPI  R18,58
000203 f028      	BRLO _0x200005D
000204 ff03      	SBRS R16,3
000205 c002      	RJMP _0x200005E
000206 5f29      	SUBI R18,-LOW(7)
000207 c001      	RJMP _0x200005F
                 _0x200005E:
000208 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000209 fd04      	SBRC R16,4
00020a c019      	RJMP _0x2000061
00020b 3321      	CPI  R18,49
00020c f420      	BRSH _0x2000063
00020d 85a8      	LDD  R26,Y+8
00020e 85b9      	LDD  R27,Y+8+1
00020f 9711      	SBIW R26,1
000210 f409      	BRNE _0x2000062
                 _0x2000063:
000211 c009      	RJMP _0x20000CD
                 _0x2000062:
000212 1753      	CP   R21,R19
000213 f010      	BRLO _0x2000067
000214 ff00      	SBRS R16,0
000215 c001      	RJMP _0x2000068
                 _0x2000067:
000216 c011      	RJMP _0x2000066
                 _0x2000068:
000217 e220      	LDI  R18,LOW(32)
000218 ff07      	SBRS R16,7
000219 c00a      	RJMP _0x2000069
00021a e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00021b 6100      	ORI  R16,LOW(16)
00021c ff02      	SBRS R16,2
00021d c006      	RJMP _0x200006A
00021e 7f0b      	ANDI R16,LOW(251)
00021f 934a      	ST   -Y,R20
000220 d12d      	RCALL SUBOPT_0x7
000221 3050      	CPI  R21,0
000222 f009      	BREQ _0x200006B
000223 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000224 d11c      	RCALL SUBOPT_0x5
000225 3050      	CPI  R21,0
000226 f009      	BREQ _0x200006C
000227 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000228 5031      	SUBI R19,LOW(1)
000229 85a8      	LDD  R26,Y+8
00022a 85b9      	LDD  R27,Y+8+1
00022b 9712      	SBIW R26,2
00022c f008      	BRLO _0x2000059
00022d cfb8      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00022e ff00      	SBRS R16,0
00022f c007      	RJMP _0x200006D
                 _0x200006E:
000230 3050      	CPI  R21,0
000231 f029      	BREQ _0x2000070
000232 5051      	SUBI R21,LOW(1)
000233 e2e0      	LDI  R30,LOW(32)
000234 93ea      	ST   -Y,R30
000235 d118      	RCALL SUBOPT_0x7
000236 cff9      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000237 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000238 ceed      	RJMP _0x2000016
                 _0x2000018:
000239 85ac      	LDD  R26,Y+12
00023a 85bd      	LDD  R27,Y+12+1
00023b 91ed      	LD   R30,X+
00023c 91fd      	LD   R31,X+
00023d d132      	RCALL __LOADLOCR6
00023e 9664      	ADIW R28,20
00023f 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000240 92ff      	PUSH R15
000241 2ef8      	MOV  R15,R24
000242 9726      	SBIW R28,6
000243 d125      	RCALL __SAVELOCR6
000244 01fe      	MOVW R30,R28
                +
000245 2400     +CLR R0
000246 0def     +ADD R30 , R15
000247 1df0     +ADC R31 , R0
                 	__ADDW1R15
                +
000248 8546     +LDD R20 , Z + 14
000249 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
00024a 2e04      	MOV  R0,R20
00024b 2a05      	OR   R0,R21
00024c f419      	BRNE _0x2000072
00024d efef      	LDI  R30,LOW(65535)
00024e efff      	LDI  R31,HIGH(65535)
00024f c023      	RJMP _0x2080002
                 _0x2000072:
000250 01de      	MOVW R26,R28
000251 9618      	ADIW R26,8
                +
000252 2400     +CLR R0
000253 0daf     +ADD R26 , R15
000254 1db0     +ADC R27 , R0
                 	__ADDW2R15
000255 018d      	MOVW R16,R26
                +
000256 8748     +STD Y + 8 , R20
000257 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
000258 e0e0      	LDI  R30,LOW(0)
000259 87ea      	STD  Y+10,R30
00025a 87eb      	STD  Y+10+1,R30
00025b 01de      	MOVW R26,R28
00025c 961c      	ADIW R26,12
                +
00025d 2400     +CLR R0
00025e 0daf     +ADD R26 , R15
00025f 1db0     +ADC R27 , R0
                 	__ADDW2R15
000260 91ed      	LD   R30,X+
000261 91fd      	LD   R31,X+
000262 93fa      	ST   -Y,R31
000263 93ea      	ST   -Y,R30
000264 931a      	ST   -Y,R17
000265 930a      	ST   -Y,R16
000266 eeed      	LDI  R30,LOW(_put_buff_G100)
000267 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000268 93fa      	ST   -Y,R31
000269 93ea      	ST   -Y,R30
00026a 01de      	MOVW R26,R28
00026b 961c      	ADIW R26,12
00026c deae      	RCALL __print_G100
00026d 019f      	MOVW R18,R30
00026e 85a8      	LDD  R26,Y+8
00026f 85b9      	LDD  R27,Y+8+1
000270 e0e0      	LDI  R30,LOW(0)
000271 93ec      	ST   X,R30
000272 01f9      	MOVW R30,R18
                 _0x2080002:
000273 d0fc      	RCALL __LOADLOCR6
000274 962c      	ADIW R28,12
000275 90ff      	POP  R15
000276 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000277 931a      	ST   -Y,R17
000278 2f1a      	MOV  R17,R26
000279 b3e2      	IN   R30,0x12
00027a 70ef      	ANDI R30,LOW(0xF)
00027b 2fae      	MOV  R26,R30
00027c 2fe1      	MOV  R30,R17
00027d 7fe0      	ANDI R30,LOW(0xF0)
00027e 2bea      	OR   R30,R26
00027f bbe2      	OUT  0x12,R30
                +
000280 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000281 958a     +DEC R24
000282 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000283 9ac2      	SBI  0x18,2
                +
000284 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000285 958a     +DEC R24
000286 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000287 98c2      	CBI  0x18,2
                +
000288 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000289 958a     +DEC R24
00028a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00028b c075      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00028c 93aa      	ST   -Y,R26
00028d 81a8      	LD   R26,Y
00028e dfe8      	RCALL __lcd_write_nibble_G101
00028f 81e8          ld    r30,y
000290 95e2          swap  r30
000291 83e8          st    y,r30
000292 81a8      	LD   R26,Y
000293 dfe3      	RCALL __lcd_write_nibble_G101
                +
000294 ec88     +LDI R24 , LOW ( 200 )
000295 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000296 9701     +SBIW R24 , 1
000297 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000298 9621      	ADIW R28,1
000299 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00029a 931a      	ST   -Y,R17
00029b 930a      	ST   -Y,R16
00029c 2f1a      	MOV  R17,R26
00029d 810a      	LDD  R16,Y+2
00029e 2fe1      	MOV  R30,R17
00029f e0f0      	LDI  R31,0
0002a0 5ae0      	SUBI R30,LOW(-__base_y_G101)
0002a1 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0002a2 81e0      	LD   R30,Z
0002a3 0fe0      	ADD  R30,R16
0002a4 2fae      	MOV  R26,R30
0002a5 dfe6      	RCALL __lcd_write_data
0002a6 2e50      	MOV  R5,R16
0002a7 2e41      	MOV  R4,R17
0002a8 8119      	LDD  R17,Y+1
0002a9 8108      	LDD  R16,Y+0
0002aa 9623      	ADIW R28,3
0002ab 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002ac e0a2      	LDI  R26,LOW(2)
0002ad d0b0      	RCALL SUBOPT_0x9
0002ae e0ac      	LDI  R26,LOW(12)
0002af dfdc      	RCALL __lcd_write_data
0002b0 e0a1      	LDI  R26,LOW(1)
0002b1 d0ac      	RCALL SUBOPT_0x9
0002b2 e0e0      	LDI  R30,LOW(0)
0002b3 2e4e      	MOV  R4,R30
0002b4 2e5e      	MOV  R5,R30
0002b5 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002b6 931a      	ST   -Y,R17
0002b7 2f1a      	MOV  R17,R26
0002b8 301a      	CPI  R17,10
0002b9 f011      	BREQ _0x2020005
0002ba 1457      	CP   R5,R7
0002bb f038      	BRLO _0x2020004
                 _0x2020005:
0002bc e0e0      	LDI  R30,LOW(0)
0002bd 93ea      	ST   -Y,R30
0002be 9443      	INC  R4
0002bf 2da4      	MOV  R26,R4
0002c0 dfd9      	RCALL _lcd_gotoxy
0002c1 301a      	CPI  R17,10
0002c2 f1f1      	BREQ _0x2080001
                 _0x2020004:
0002c3 9453      	INC  R5
0002c4 9ac0      	SBI  0x18,0
0002c5 2fa1      	MOV  R26,R17
0002c6 dfc5      	RCALL __lcd_write_data
0002c7 98c0      	CBI  0x18,0
0002c8 c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002c9 d0a1      	RCALL __SAVELOCR4
0002ca 019d      	MOVW R18,R26
                 _0x2020008:
0002cb 01d9      	MOVW R26,R18
                +
0002cc 5f2f     +SUBI R18 , LOW ( - 1 )
0002cd 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002ce 91ec      	LD   R30,X
0002cf 2f1e      	MOV  R17,R30
0002d0 30e0      	CPI  R30,0
0002d1 f019      	BREQ _0x202000A
0002d2 2fa1      	MOV  R26,R17
0002d3 dfe2      	RCALL _lcd_putchar
0002d4 cff6      	RJMP _0x2020008
                 _0x202000A:
0002d5 d09c      	RCALL __LOADLOCR4
0002d6 9624      	ADIW R28,4
0002d7 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002d8 931a      	ST   -Y,R17
0002d9 2f1a      	MOV  R17,R26
0002da b3e1      	IN   R30,0x11
0002db 6fe0      	ORI  R30,LOW(0xF0)
0002dc bbe1      	OUT  0x11,R30
0002dd 9aba      	SBI  0x17,2
0002de 9ab8      	SBI  0x17,0
0002df 9ab9      	SBI  0x17,1
0002e0 98c2      	CBI  0x18,2
0002e1 98c0      	CBI  0x18,0
0002e2 98c1      	CBI  0x18,1
0002e3 2e71      	MOV  R7,R17
0002e4 2fe1      	MOV  R30,R17
0002e5 58e0      	SUBI R30,-LOW(128)
                +
0002e6 93e0 0162+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002e8 2fe1      	MOV  R30,R17
0002e9 54e0      	SUBI R30,-LOW(192)
                +
0002ea 93e0 0163+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002ec e1a4      	LDI  R26,LOW(20)
0002ed e0b0      	LDI  R27,0
0002ee d0d9      	RCALL _delay_ms
0002ef d072      	RCALL SUBOPT_0xA
0002f0 d071      	RCALL SUBOPT_0xA
0002f1 d070      	RCALL SUBOPT_0xA
0002f2 e2a0      	LDI  R26,LOW(32)
0002f3 df83      	RCALL __lcd_write_nibble_G101
                +
0002f4 e980     +LDI R24 , LOW ( 400 )
0002f5 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0002f6 9701     +SBIW R24 , 1
0002f7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0002f8 e2a8      	LDI  R26,LOW(40)
0002f9 df92      	RCALL __lcd_write_data
0002fa e0a4      	LDI  R26,LOW(4)
0002fb df90      	RCALL __lcd_write_data
0002fc e8a5      	LDI  R26,LOW(133)
0002fd df8e      	RCALL __lcd_write_data
0002fe e0a6      	LDI  R26,LOW(6)
0002ff df8c      	RCALL __lcd_write_data
000300 dfab      	RCALL _lcd_clear
                 _0x2080001:
000301 9119      	LD   R17,Y+
000302 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000303 93ba      	ST   -Y,R27
000304 93aa      	ST   -Y,R26
000305 91a9          ld   r26,y+
000306 91b9          ld   r27,y+
000307 27ee          clr  r30
000308 27ff          clr  r31
                 strlen0:
000309 916d          ld   r22,x+
00030a 2366          tst  r22
00030b f011          breq strlen1
00030c 9631          adiw r30,1
00030d cffb          rjmp strlen0
                 strlen1:
00030e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00030f 93ba      	ST   -Y,R27
000310 93aa      	ST   -Y,R26
000311 27aa          clr  r26
000312 27bb          clr  r27
000313 91e9          ld   r30,y+
000314 91f9          ld   r31,y+
                 strlenf0:
000315 9005      	lpm  r0,z+
000316 2000          tst  r0
000317 f011          breq strlenf1
000318 9611          adiw r26,1
000319 cffb          rjmp strlenf0
                 strlenf1:
00031a 01fd          movw r30,r26
00031b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x0:
00031c 920a      	ST   -Y,R0
00031d 921a      	ST   -Y,R1
00031e 92fa      	ST   -Y,R15
00031f 936a      	ST   -Y,R22
000320 937a      	ST   -Y,R23
000321 938a      	ST   -Y,R24
000322 939a      	ST   -Y,R25
000323 93aa      	ST   -Y,R26
000324 93ba      	ST   -Y,R27
000325 93ea      	ST   -Y,R30
000326 93fa      	ST   -Y,R31
000327 b7ef      	IN   R30,SREG
000328 93ea      	ST   -Y,R30
000329 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
00032a df81      	RCALL _lcd_clear
00032b e4a1      	LDI  R26,LOW(65)
00032c df89      	RCALL _lcd_putchar
00032d e4a4      	LDI  R26,LOW(68)
00032e df87      	RCALL _lcd_putchar
00032f e4a3      	LDI  R26,LOW(67)
000330 cf85      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000331 df84      	RCALL _lcd_putchar
000332 e3aa      	LDI  R26,LOW(58)
000333 df82      	RCALL _lcd_putchar
000334 e2a0      	LDI  R26,LOW(32)
000335 cf80      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000336 9614      	ADIW R26,4
                +
000337 91ed     +LD R30 , X +
000338 91fc     +LD R31 , X
000339 9711     +SBIW R26 , 1
                 	__GETW1P
00033a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00033b 91ed      	LD   R30,X+
00033c 91fd      	LD   R31,X+
00033d 9631      	ADIW R30,1
00033e 93fe      	ST   -X,R31
00033f 93ee      	ST   -X,R30
000340 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
000341 932a      	ST   -Y,R18
000342 85ad      	LDD  R26,Y+13
000343 85be      	LDD  R27,Y+13+1
000344 85ef      	LDD  R30,Y+15
000345 89f8      	LDD  R31,Y+15+1
000346 9509      	ICALL
000347 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x6:
000348 89e8      	LDD  R30,Y+16
000349 89f9      	LDD  R31,Y+16+1
00034a 9734      	SBIW R30,4
00034b 8be8      	STD  Y+16,R30
00034c 8bf9      	STD  Y+16+1,R31
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
00034e 85ad      	LDD  R26,Y+13
00034f 85be      	LDD  R27,Y+13+1
000350 85ef      	LDD  R30,Y+15
000351 89f8      	LDD  R31,Y+15+1
000352 9509      	ICALL
000353 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000354 89a8      	LDD  R26,Y+16
000355 89b9      	LDD  R27,Y+16+1
000356 9614      	ADIW R26,4
000357 91ed      	LD   R30,X+
000358 91fd      	LD   R31,X+
000359 83ee      	STD  Y+6,R30
00035a 83ff      	STD  Y+6+1,R31
00035b 81ae      	LDD  R26,Y+6
00035c 81bf      	LDD  R27,Y+6+1
00035d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00035e df2d      	RCALL __lcd_write_data
00035f e0a3      	LDI  R26,LOW(3)
000360 e0b0      	LDI  R27,0
000361 c066      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xA:
000362 e3a0      	LDI  R26,LOW(48)
000363 df13      	RCALL __lcd_write_nibble_G101
                +
000364 e980     +LDI R24 , LOW ( 400 )
000365 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000366 9701     +SBIW R24 , 1
000367 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000368 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000369 935a      	ST   -Y,R21
                 __SAVELOCR5:
00036a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00036b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00036c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00036d 931a      	ST   -Y,R17
00036e 930a      	ST   -Y,R16
00036f 9508      	RET
                 
                 __LOADLOCR6:
000370 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000371 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000372 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000373 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000374 8119      	LDD  R17,Y+1
000375 8108      	LD   R16,Y
000376 9508      	RET
                 
                 __ANEGW1:
000377 95f1      	NEG  R31
000378 95e1      	NEG  R30
000379 40f0      	SBCI R31,0
00037a 9508      	RET
                 
                 __MULD12:
                 __MULD12U:
00037b 9f7a      	MUL  R23,R26
00037c 2d70      	MOV  R23,R0
00037d 9f6b      	MUL  R22,R27
00037e 0d70      	ADD  R23,R0
00037f 9ff8      	MUL  R31,R24
000380 0d70      	ADD  R23,R0
000381 9fe9      	MUL  R30,R25
000382 0d70      	ADD  R23,R0
000383 9f6a      	MUL  R22,R26
000384 2d60      	MOV  R22,R0
000385 0d71      	ADD  R23,R1
000386 9ffb      	MUL  R31,R27
000387 0d60      	ADD  R22,R0
000388 1d71      	ADC  R23,R1
000389 9fe8      	MUL  R30,R24
00038a 0d60      	ADD  R22,R0
00038b 1d71      	ADC  R23,R1
00038c 2788      	CLR  R24
00038d 9ffa      	MUL  R31,R26
00038e 2df0      	MOV  R31,R0
00038f 0d61      	ADD  R22,R1
000390 1f78      	ADC  R23,R24
000391 9feb      	MUL  R30,R27
000392 0df0      	ADD  R31,R0
000393 1d61      	ADC  R22,R1
000394 1f78      	ADC  R23,R24
000395 9fea      	MUL  R30,R26
000396 2de0      	MOV  R30,R0
000397 0df1      	ADD  R31,R1
000398 1f68      	ADC  R22,R24
000399 1f78      	ADC  R23,R24
00039a 9508      	RET
                 
                 __DIVD21U:
00039b 933f      	PUSH R19
00039c 934f      	PUSH R20
00039d 935f      	PUSH R21
00039e 2400      	CLR  R0
00039f 2411      	CLR  R1
0003a0 01a0      	MOVW R20,R0
0003a1 e230      	LDI  R19,32
                 __DIVD21U1:
0003a2 0faa      	LSL  R26
0003a3 1fbb      	ROL  R27
0003a4 1f88      	ROL  R24
0003a5 1f99      	ROL  R25
0003a6 1c00      	ROL  R0
0003a7 1c11      	ROL  R1
0003a8 1f44      	ROL  R20
0003a9 1f55      	ROL  R21
0003aa 1a0e      	SUB  R0,R30
0003ab 0a1f      	SBC  R1,R31
0003ac 0b46      	SBC  R20,R22
0003ad 0b57      	SBC  R21,R23
0003ae f428      	BRCC __DIVD21U2
0003af 0e0e      	ADD  R0,R30
0003b0 1e1f      	ADC  R1,R31
0003b1 1f46      	ADC  R20,R22
0003b2 1f57      	ADC  R21,R23
0003b3 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003b4 60a1      	SBR  R26,1
                 __DIVD21U3:
0003b5 953a      	DEC  R19
0003b6 f759      	BRNE __DIVD21U1
0003b7 01fd      	MOVW R30,R26
0003b8 01bc      	MOVW R22,R24
0003b9 01d0      	MOVW R26,R0
0003ba 01ca      	MOVW R24,R20
0003bb 915f      	POP  R21
0003bc 914f      	POP  R20
0003bd 913f      	POP  R19
0003be 9508      	RET
                 
                 __GETW1PF:
0003bf 9005      	LPM  R0,Z+
0003c0 91f4      	LPM  R31,Z
0003c1 2de0      	MOV  R30,R0
0003c2 9508      	RET
                 
                 __PUTPARD1:
0003c3 937a      	ST   -Y,R23
0003c4 936a      	ST   -Y,R22
0003c5 93fa      	ST   -Y,R31
0003c6 93ea      	ST   -Y,R30
0003c7 9508      	RET
                 
                 _delay_ms:
0003c8 9610      	adiw r26,0
0003c9 f039      	breq __delay_ms1
                 __delay_ms0:
0003ca 95a8      	wdr
                +
0003cb ea80     +LDI R24 , LOW ( 0xFA0 )
0003cc e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0003cd 9701     +SBIW R24 , 1
0003ce f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0003cf 9711      	sbiw r26,1
0003d0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003d1 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  35 r1 :  13 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   8 
r16:  39 r17:  40 r18:  40 r19:  13 r20:  19 r21:  27 r22:  22 r23:  19 
r24:  37 r25:  11 r26: 110 r27:  34 r28:  18 r29:   1 r30: 227 r31:  72 
x  :  31 y  : 162 z  :  17 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  13 add   :  15 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  22 ld    :  42 ldd   :  61 ldi   : 113 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  35 movw  :  34 
mul   :  11 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   8 out   :  47 pop   :   4 push  :   4 rcall :  74 ret   :  26 
reti  :   2 rjmp  :  63 rol   :   7 ror   :   0 sbc   :   4 sbci  :   3 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :  22 sbr   :   1 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  65 std   :  30 sts   :   2 sub   :   2 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007a4   1924     32   1956   16384  11.9%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
